# ----------------------------------------------------------------------------------
# PRINT_START
# HOTEND=[nozzle_temperature_initial_layer]
# BED=[bed_temperature_initial_layer_single]
# Chamber=[chamber_temperature]
# IS_MM_MODE=1
# INITIAL_EXTRUDER=[initial_extruder]
# IS_OS=1
# {if is_extruder_used[0]}T0_TEMP_INITIAL={nozzle_temperature_initial_layer[0]} T0_TEMP={nozzle_temperature[0]}{endif}
# {if is_extruder_used[1]}T1_TEMP_INITIAL={nozzle_temperature_initial_layer[1]} T1_TEMP={nozzle_temperature[1]}{endif}
# {if is_extruder_used[2]}T2_TEMP_INITIAL={nozzle_temperature_initial_layer[2]} T2_TEMP={nozzle_temperature[2]}{endif}
# {if is_extruder_used[3]}T3_TEMP_INITIAL={nozzle_temperature_initial_layer[3]} T3_TEMP={nozzle_temperature[3]}{endif}
# {if is_extruder_used[4]}T4_TEMP_INITIAL={nozzle_temperature_initial_layer[4]} T4_TEMP={nozzle_temperature[4]}{endif}
# {if is_extruder_used[5]}T5_TEMP_INITIAL={nozzle_temperature_initial_layer[5]} T5_TEMP={nozzle_temperature[5]}{endif}

# ----------------------------------------------------------------------------------
[gcode_macro _PRINT_START_STORE_TEMP]
gcode:
  {% set wait_temperature_delta = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].wait_temperature_delta %}
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    {% set tool_name = "T" ~ (tool_nr|string) %}
    {% if printer["gcode_macro " ~ tool_name ] %}
      {% set tooltemp_param = tool_name ~ '_TEMP' %}
      {% set tooltemp_param_initial = tool_name ~ '_TEMP_INITIAL' %}
      SET_GCODE_VARIABLE MACRO={tool_name} VARIABLE=nozzle_temperature VALUE=0
      SET_GCODE_VARIABLE MACRO={tool_name} VARIABLE=nozzle_temperature_initial VALUE=0
      {% if tooltemp_param in params %}
        {action_respond_info("_PRINT_START_STORE_TEMP: Store nozzle temperature for tool %s = %s" % (tool_nr, params[tooltemp_param]))}
        SET_GCODE_VARIABLE MACRO={tool_name} VARIABLE=nozzle_temperature VALUE={params[tooltemp_param]}
        SET_GCODE_VARIABLE MACRO={tool_name} VARIABLE=nozzle_temperature_initial VALUE={params[tooltemp_param]}
      {% endif %}
      {% if tooltemp_param_initial in params %}
        {action_respond_info("_PRINT_START_STORE_TEMP: Store nozzle temperature (initial) for tool %s = %s" % (tool_nr, params[tooltemp_param_initial]))}
        SET_GCODE_VARIABLE MACRO={tool_name} VARIABLE=nozzle_temperature_initial VALUE={params[tooltemp_param_initial]}
      {% endif %}
    {% endif %}
  {% endfor %}

# ----------------------------------------------------------------------------------
[gcode_macro _PRINT_START_CLEAR_STATE]
gcode:
  SET_GCODE_VARIABLE MACRO="PRINT_START" VARIABLE=tc_no_tool_attached VALUE=0
  SET_GCODE_VARIABLE MACRO="PRINT_START" VARIABLE=params_feedrate VALUE=-1
  SET_GCODE_VARIABLE MACRO="PRINT_START" VARIABLE=is_primed VALUE=0
  # clear state of purge for new print.
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    SET_TOOL_PARAMETER T={tool_nr} PARAMETER="params_is_purged" VALUE=1
    SET_TOOL_PARAMETER T={tool_nr} PARAMETER="params_is_purged_in_place" VALUE=0
  {% endfor %}

# ----------------------------------------------------------------------------------
[gcode_macro _PRINT_START_PRE_HEAT_TOOL]
gcode:
  {% set wait_temperature_delta = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].wait_temperature_delta %}
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    {% set tool_name = "T" ~ (tool_nr|string) %}
    {% if printer["gcode_macro " ~ tool_name ] %}
      {% set nozzle_temperature = printer["gcode_macro " ~ tool_name].nozzle_temperature %}
      {% set nozzle_temperature_initial = printer["gcode_macro " ~ tool_name].nozzle_temperature_initial %}
      {% set nozzle_temperature = nozzle_temperature_initial if nozzle_temperature_initial != 0 else nozzle_temperature%}
      {% if nozzle_temperature != 0 %}
        {% set cur_temp = nozzle_temperature|float - wait_temperature_delta|float %}
        {action_respond_info("_PRINT_START_PRE_HEAT_TOOL: Pre-Heat (M104) extruder T%s to temp=%.2f (delta=%.2f)" % (tool_nr, cur_temp, wait_temperature_delta))}
        M104 {tool_name} S{cur_temp}
      {% endif %}
    {% endif %}
  {% endfor %}

# ----------------------------------------------------------------------------------
[gcode_macro _PRINT_START_HOMING]
gcode:
  M117 Calibrating bed
  # BED_MESH_CLEAR
  # BED_MESH_CALIBRATE
  BED_MESH_CLEAR                  # Clear bad mesh.
  BED_MESH_PROFILE LOAD=default   # Load default bed mesh profile.

  M117 Homing
  G28                             # Home all axes.
  QUAD_GANTRY_LEVEL               # Level entry gantry.
  G28 Z                           # Home Z axe only.

# ----------------------------------------------------------------------------------
[gcode_macro _PRINT_START_PRIME_TOOLS]
gcode:
  # M220 S179 -> speed
  {% set initial_extruder = params.INITIAL_EXTRUDER|int %}
  {% set bed_tmp = params.BED|default(0)|int %}
  {% set hotend_tmp = params.HOTEND|default(0)|int %}

  {action_respond_info("Running `_PRINT_START_PRIME_TOOLS` macros...initial_extruder=T%s" % initial_extruder)}

  {% set wait_temperature_delta = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].wait_temperature_delta %}
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
      {% if (tool_nr != initial_extruder) %}
        {% set tool_name = "T" ~ (tool_nr|string) %}
        {% set tool = printer['tool T' ~ (tool_nr|string)] %}
        {% if printer["gcode_macro " ~ tool_name ] %}
          {% set nozzle_temperature = printer["gcode_macro " ~ tool_name].nozzle_temperature %}
          {% set nozzle_temperature_initial = printer["gcode_macro " ~ tool_name].nozzle_temperature_initial %}
          {% set nozzle_temperature = nozzle_temperature_initial if nozzle_temperature_initial != 0 else nozzle_temperature%}
          {% if nozzle_temperature != 0 %}
            {action_respond_info("Running `_PRINT_START_PRIME_TOOLS` Changing to extruder=T%s..." % tool_nr)}
            {% set cur_z = printer.toolhead.position[2]|float %}
            T{tool_nr} SKIP_RESTORE_STATE=0
            {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
              {action_respond_info("Running `_PRINT_START_PRIME_TOOLS` Priming extruder=T%s..." % tool_nr)}
              G90 ; go absolute
              G0 Z{cur_z} F1000
              SET_TOOL_PARAMETER T={tool_nr} PARAMETER="params_is_purged" VALUE=0
              LTC_PURGE_TOOLHEAD_IF_NEEDED RESTORE_STATE=0 TEMP={nozzle_temperature} TEMP_END={nozzle_temperature - wait_temperature_delta}
              MOVE_TO_CHANGE_SAFE_POSITION T={tool_nr}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endfor %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {action_respond_info("_PRINT_START_PRIME_TOOLS: Changing to initial extruder=T%s..." % initial_extruder)}
    {% set cur_z = printer.toolhead.position[2]|float %}
    T{initial_extruder} SKIP_RESTORE_STATE=0
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    G90 ; go absolute
    G0 Z{cur_z} F1000
    {action_respond_info("_PRINT_START_PRIME_TOOLS: Priming initial extruder=T%s..." % initial_extruder)}
    {% set tool_name = "T" ~ (initial_extruder|string) %}
    {% set nozzle_temperature = printer["gcode_macro " ~ tool_name].nozzle_temperature %}
    {% set nozzle_temperature_initial = printer["gcode_macro " ~ tool_name].nozzle_temperature_initial %}
    {% set nozzle_temperature = nozzle_temperature_initial if nozzle_temperature_initial != 0 else nozzle_temperature%}
    {% set hotend_tmp = nozzle_temperature if (nozzle_temperature != 0) else hotend_tmp %}
    M104 S{hotend_tmp - wait_temperature_delta} # prevent ozzing while bed is heating
    MOVE_TO_PURGE_PLACE
    {action_respond_info("_PRINT_START_PRIME_TOOLS: Waiting until bed is preheated...")}
    M190 S{bed_tmp} # pre-heat bed and wait
    M104 S{hotend_tmp}  # start prime line without waiting.

    SET_TOOL_PARAMETER T={initial_extruder} PARAMETER="params_is_purged" VALUE=0
    LTC_PURGE_TOOLHEAD_IF_NEEDED RESTORE_STATE=0 TEMP={hotend_tmp}

    G91 ; go relative
    G0 Z10 F2000
    G0 Y50 F20000
    G90 ; go absolute

    SET_GCODE_VARIABLE MACRO="PRINT_START" VARIABLE=is_primed VALUE=1
  {% endif %}

# ----------------------------------------------------------------------------------
[gcode_macro PRINT_START]
variable_restore_move_speed: 600        # the speed when calling RESTORE_GCODE_STATE
variable_is_runnout_sensor_enabled: 0   # placeholder, indicates if runnuout sensor of Orbiter 2.0 should/can be used in current time.
variable_is_prusa_slicer: 0
variable_is_super_slicer: 0
variable_is_orce_slicer: 0
variable_tc_no_tool_attached: 0         # if 1 (means true), shuttle has no tool attached.
variable_params_feedrate: -1
variable_is_primed: 0
variable_is_printing: 0
gcode:
  {action_respond_info("PRINT_START: Starting the print...")}
  {% set bed_tmp = params.BED|default(0)|int %}
  {% set hotend_tmp = params.HOTEND|default(0)|int %}
  {% set chamber = params.CHAMBER|default(0)|int %}
  {% set initial_extruder = params.INITIAL_EXTRUDER|default(0)|int %}
  {% set is_prusa_slicer = params.IS_PS|default(0)|int %}
  {% set is_super_slicer = params.IS_SS|default(0)|int %}
  {% set is_orce_slicer = params.IS_OS|default(0)|int %}

  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=is_printing VALUE=1

  M117 Initializing

  M140 S{bed_tmp}   # Set Heat Bed temperature whithout waiting.

  {% set command_params =
  ((" T0_TEMP=" ~ params.T0_TEMP) if params.T0_TEMP is defined else "") ~
  ((" T0_TEMP_INITIAL=" ~ params.T0_TEMP_INITIAL) if params.T0_TEMP_INITIAL is defined else "") ~
  ((" T1_TEMP=" ~ params.T1_TEMP) if params.T1_TEMP is defined else "") ~
  ((" T1_TEMP_INITIAL=" ~ params.T1_TEMP_INITIAL) if params.T1_TEMP_INITIAL is defined else "") ~
  ((" T2_TEMP=" ~ params.T2_TEMP) if params.T2_TEMP is defined else "") ~
  ((" T2_TEMP_INITIAL=" ~ params.T2_TEMP_INITIAL) if params.T2_TEMP_INITIAL is defined else "") ~
  ((" T3_TEMP=" ~ params.T3_TEMP) if params.T3_TEMP is defined else "") ~
  ((" T3_TEMP_INITIAL=" ~ params.T3_TEMP_INITIAL) if params.T3_TEMP_INITIAL is defined else "") ~
  ((" T4_TEMP=" ~ params.T4_TEMP) if params.T4_TEMP is defined else "") ~
  ((" T4_TEMP_INITIAL=" ~ params.T4_TEMP_INITIAL) if params.T4_TEMP_INITIAL is defined else "")%}

  _PRINT_START_STORE_TEMP {command_params}  # save temperature from params.
  _PRINT_START_CLEAR_STATE  # restore variables for new print
  _PRINT_START_PRE_HEAT_TOOL  # start pre-heating tool without waiting.
  _PRINT_START_HOMING # do homing rutine

  # Force liftbar to move to top.
  {% set force_full_up_move_on_change = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].force_full_up_move_on_change %}
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CONFIGURATION VARIABLE=force_full_up_move_on_change VALUE=1

  # Prime all extruder.
  _PRINT_START_PRIME_TOOLS INITIAL_EXTRUDER={initial_extruder} BED={bed_tmp} HOTEND={hotend_tmp}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    # Restore original value.
    SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CONFIGURATION VARIABLE=force_full_up_move_on_change VALUE={force_full_up_move_on_change}

    {% set led_default_command = "T" ~ initial_extruder ~ "_default_light" %}
    SET_LED_EFFECT EFFECT={led_default_command} REPLACE=1
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set z_safe = [th.position.z + 5, th.axis_maximum.z]|min %}

    {% for tool_nr in printer.toolchanger.tool_numbers %}
        {% set tn = "T" + (tool_nr|string) %}
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=nozzle_temperature_initial VALUE=0
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=nozzle_temperature VALUE=0
    {% endfor %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=toolhead_temp VALUE=-1
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=part_fan_speed VALUE=-1
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=is_printing VALUE=0

    M400                            # wait for buffer to clear
    G92 E0                          # zero the extruder
    G1 E-4.0 F3600                  # retract filament

    TURN_OFF_HEATERS
    # SDCARD_RESET_FILE

    M140                            # turn off bed
    M104 S0
    M106 S0

    G90                             # absolute positioning
    G0 Z{z_safe} F2000              # move nozzle to remove stringing
    T0                              # take tool 0 with probe
    PARK
    LIFTBAR_TO_TOP

    # M18                             # Motors off
    M117 Print done

    _LED_SET_ALL_AS_IDLE
    _POWER_LED_OFF_AFTER_PRINT_CHECK
    _POWER_PRINTER_OFF_AFTER_PRINT_CHECK

# -------------------------------------------------------------------------
[gcode_macro PRE_HEAT]
gcode:
    {% set bed_tmp    = params.BED|default(0)|int %}
    {% set hotend_tmp = params.HOTEND|default(0)|int %}
    {% set chamber    = params.CHAMBER|default(0)|int %}

    {% if bed_tmp > 0 %}
        M190 S{bed_tmp}             ; Wait for Heat Bed temperature
    {% endif %}

    {% if hotend_tmp > 0 %}
        M109 S{hotend_tmp}          ; Wait for extruder temperature
    {% endif %}
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}   ; wait for chamber temp

# -------------------------------------------------------------------------
[gcode_macro MOVE_TO_CENTER]
gcode:
    {% set th = printer.toolhead %}
    # {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
    {% set z_safe = 10 %}

    G90   ; go absolute
    G0 Z{z_safe} F2000              # move nozzle to remove stringing
    G1 X175 Y175 F20000             # Move to start position
# -------------------------------------------------------------------------
[gcode_macro MOVE_TO_CHANGE_SAFE_POSITION]
gcode:
  {% set need_to_move_x = params.MOVE_X|default(1)|int %}
  {% set pos_x = printer.toolhead.axis_maximum.x / 2 %}
  {% if params.T is defined %}
    {% set tool = printer['tool T' ~ params.T|string] %}
    {% set pos_x = tool.params_park_x|float %}
  {% endif %}
  {% set safe_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].safe_y|float %}
  {% set fast_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed|float %}
  {% set parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].parking_speed|float %}
  {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}

  G90 ; go absolute
  G0 Y{safe_y} F{fast_speed * speed_ratio}
  {% if need_to_move_x %}
    G0 X{pos_x} F{fast_speed * speed_ratio}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro SEND_MOBI_MESSAGE]
description:
  Sends message to Mobileraker.
  # https://github.com/Clon1998/mobileraker_companion/blob/main/docs/Custom_Notifications.md
gcode:
    {% set msg = params.MSG|default('') %}
    M117 $MR$:{msg}

# -------------------------------------------------------------------------
[gcode_macro MR_NOTIFY]
description:
  Allows you to send a custom notification via Mobileraker without using the M117 command
  # See: https://github.com/Clon1998/mobileraker_companion/blob/main/docs/Custom_Notifications.md
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}
    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}

# -------------------------------------------------------------------------
[gcode_macro PARK]
description: MANUAL use only. Parks head to safe position.
gcode:
  {action_respond_info("Running `PARK` macro...")}
  {% if printer.toolhead.homed_axes == "xyz" %}
    {% set raise_z_axis = params.RAISE_Z|int if params.RAISE_Z is defined else 0 %}
    {% set move_x = printer.configfile.config["stepper_x"]["position_max"]|float - 10 %}
    {% set move_y = printer.configfile.config["stepper_y"]["position_max"]|float - 10 %}
    {% if raise_z_axis %}
        {% set z_offset = 5 %}
        {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
        {% set move_z = [printer.toolhead.position.z + z_offset, max_z]|min %}
        G90     ; go absolute
        G0 Z{move_z} F1500
    {% endif %}
    G90     ; go absolute
    G0 X{move_x} Y{move_y} F5000
  {% else %}
      { action_raise_error("Please, Home Axis First!") }
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro PARK_NO_UP]
description:
    MANUAL use only. Parks head to safe position, ensure toolhead does not touch plate.
gcode:
  {action_respond_info("Running `PARK_NO_UP` macro...")}
  PARK RAISE_Z=0

# -------------------------------------------------------------------------
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: [MOVE<need_move>] [MODE<pause_mode>]
  Pause the print and park if asked.
  MOVE= Flag (0|1) to indicate we need to move to parking place
  MODE= Flag (0|1) Default 0.
variable_timeout_pause: 43200           # Time out used by the PAUSE -> 12h
variable_timeout_disable_heater: 600    # Delay after which the hotend heater is disabled in the PAUSE state
variable_position_x: 0
variable_position_y: 0
variable_position_z: 0
variable_position_z: 0
gcode:
  {action_respond_info("Running `PAUSE` macro...")}
  {% if printer['pause_resume'].is_paused|int == 0 %}
    SAVE_GCODE_STATE NAME=PAUSE_MARCO_STATE         # save current print position for resume
    BASE_PAUSE                                      # pause print, uses PAUSE_STATE

    {% set mode = params.MODE|default(0)|int %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=pause_mode VALUE={mode}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=toolhead_temp VALUE={printer['extruder'].target}

    {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
    {% set fan = printer['multi_fan T' + current_tool_number|string + '_partfan'] %}
    {action_respond_info("`PAUSE` current toolhead fan speed %s..." % (fan.speed))}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=part_fan_speed VALUE={fan.speed}

    SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro PAUSE"].timeout_pause}
    UPDATE_DELAYED_GCODE ID=_PAUSE_DISABLE_HEATER DURATION={printer["gcode_macro PAUSE"].timeout_disable_heater}

    M106 S0                                         # Disable part fan.

    {% set need_move = params.MOVE|default(1)|int %}
    {% if need_move %}
      {action_respond_info("PAUSE: Park toolhead.")}
      G90                                           # absolute positioning
      {% set cur_z = printer.toolhead.position[2]|float %}
      {% set z = [cur_z + 5, printer.toolhead.axis_maximum.z]|min %}
      G0 Z{z} F900                                  # raise Z up by z hop amount
      PARK
    {% endif %}
    SAVE_GCODE_STATE NAME=PAUSE_PARK_STATE          # save parked position in case toolhead is moved during the pause.
  {% endif %}

# -------------------------------------------------------------------------
[delayed_gcode _PAUSE_DISABLE_HEATER]
gcode:
  {% if printer['pause_resume'].is_paused|int == 1 %}
    M118 Disable extruder heater.
    { action_respond_info("_PAUSE_DISABLE_HEATER: Disable extruder heater.") }
    M104 S0
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro RESUME]
rename_existing: BASE_RESUME
description: Resume the print.
variable_pause_mode: 0
variable_toolhead_temp: -1
variable_part_fan_speed: -1
gcode:
  {action_respond_info("Running `RESUME` macro...")}
  {% if printer['pause_resume'].is_paused|int == 1 %}
    {% if (printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
      {action_respond_info("Cannot resume print. Please fix all problems with toolheads and call `_LTC_PAUSE_RESOLVE`.")}
    {% else %}
      SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}   # set timeout back to configured value.
      UPDATE_DELAYED_GCODE ID=_PAUSE_DISABLE_HEATER DURATION=0                      # reset delayed disabling of heater.

      {% if toolhead_temp > 0 %}
        {action_respond_info("Preheat toolhead to t=%.2f" % toolhead_temp)}
        M109 S{toolhead_temp|int}                                                   # wait for hotend to heat back up
      {% endif %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=toolhead_temp VALUE=-1

      {% if part_fan_speed != -1 %}
        M106 S{255 * part_fan_speed}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=part_fan_speed VALUE=-1

      {% if printer["gcode_macro RESUME"].pause_mode == 0 %}
        {% set restore_move_speed = printer["gcode_macro PRINT_START"].restore_move_speed|default(60) %}
        RESTORE_GCODE_STATE NAME=PAUSE_PARK_STATE MOVE=1 MOVE_SPEED={restore_move_speed}

        # we are in parking position, we can do other actions like purge etc.

        {% set restore_move_speed = printer["gcode_macro PRINT_START"].restore_move_speed|default(60) %}
        RESTORE_GCODE_STATE NAME=PAUSE_MARCO_STATE MOVE=1 MOVE_SPEED={restore_move_speed}                        ; restore position
      {% endif %}

      BASE_RESUME
    {% endif %}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
description: Cancel print
gcode:
    {% set th = printer.toolhead %}
    {% set z_safe = [th.position.z + 5, th.axis_maximum.z]|min %}

    {% for tool_nr in printer.toolchanger.tool_numbers %}
        {% set tn = "T" + (tool_nr|string) %}
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=nozzle_temperature_initial VALUE=0
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=nozzle_temperature VALUE=0
    {% endfor %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=toolhead_temp VALUE=-1
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=part_fan_speed VALUE=-1
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=is_printing VALUE=0

    M400                           # wait for buffer to clear
    G92 E0                         # zero the extruder
    G1 E-4.0 F3600                 # retract filament

    TURN_OFF_HEATERS
    # SDCARD_RESET_FILE

    M140                            # turn off bed
    M104 S0
    M106 S0

    G90                            # absolute positioning
    G0 Z{z_safe} F2000             # move nozzle to remove stringing
    T0
    PARK

    # M18                             # Motors off
    M117 Print canceled

    # _LED_SET_ALL_AS_IDLE

    CLEAR_PAUSE
    BASE_CANCEL_PRINT

# -------------------------------------------------------------------------
[gcode_macro BEFORE_TOOL_CHANGE]
gcode:
  # Custome code called before tool change here...

# -------------------------------------------------------------------------
[gcode_macro AFTER_TOOL_CHANGE]
gcode:
    # Custome code called after tool change here...
