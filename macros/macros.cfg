# QUERY_BUTTON button=carriagesense_t0
# QUERY_BUTTON button=docksense_t0
# QUERY_BUTTON button=nudge_sensor_pin
# QUERY_BUTTON button=nudge_rail_sensor_pin

# -------------------------------------------------------------------------
[gcode_macro _LTC_PAUSE]
description: [DT<tool_number>] [PT<tool_number>]
  Initiate pause state on failare while toolhead change, sets the flag to indicate pause was triggered.
  DT= Dropoff toolhead number (0,1,2...)
  PT= Pickup toolhead number (0,1,2...)
variable_is_ltc_paused: 0             # Flag indecating if in pause state.
variable_tool: -1                     # Current tool if was provided
variable_dropoff_tool_number: -1      # Dropoff tool if was provided
variable_pickup_tool_number: -1       # Pickup tool if was provided
variable_restore_position_saved: 0    # Indicates if restored position was saved
variable_restore_position_x: -1       # Restore position X (-1 means not defined)
variable_restore_position_y: -1       # Restore position Y (-1 means not defined)
variable_restore_position_z: -1       # Restore position Z (-1 means not defined)
gcode:
  {action_respond_info("Running `_LTC_PAUSE` macro...")}
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=is_ltc_paused VALUE=1

    M400
    G4 P2000

    {% if (params.DT is defined) %}
      {% set dropoff_tool = params.DT|int %}
      SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=dropoff_tool_number VALUE={dropoff_tool}
    {% endif %}

    {% if (params.PT is defined) %}
      {% set pickup_tool = params.PT|int %}
      SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=pickup_tool_number VALUE={pickup_tool}
    {% endif %}

    SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=tool VALUE={printer[printer.toolchanger.tool].tool_number}

    {% if (printer["gcode_macro _LTC_PAUSE"].restore_position_saved == 0) %}
      {% if printer.toolhead.homed_axes == "xyz" %}
        {action_respond_info("_LTC_PAUSE: Store current position as restore position...")}
        {% set cur_x = printer.toolhead.position[0]|float %}
        {% set cur_y = printer.toolhead.position[1]|float %}
        {% set cur_z = printer.toolhead.position[2]|float %}
        SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_x VALUE={cur_x}
        SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_y VALUE={cur_y}
        SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_z VALUE={cur_z}
        SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_saved VALUE=1
      {% else %}
        _LTC_PAUSE_CLEAR
        {action_raise_error("ERROR: Cannot get current position. Printer is not homed.")}
      {% endif %}
    {% endif %}

    _LTC_PAUSE_EXECUTE
  {% else %}
    {action_respond_info("_LTC_PAUSE: Printer paused already.")}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _LTC_PAUSE_EXECUTE]
gcode:
  {action_respond_info("Running `_LTC_PAUSE_EXECUTE` macro...")}
  {% if (printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) and (printer['pause_resume'].is_paused|int == 0) %}
    {% set dropoff_tool_number = printer["gcode_macro _LTC_PAUSE"].dropoff_tool_number %}
    {% set pickup_tool_number = printer["gcode_macro _LTC_PAUSE"].pickup_tool_number %}
    SELECT_TOOL_ERROR
    LTC_PAUSE_ECHO_DETAILS
    SEND_MOBI_MESSAGE MSG='!!! Print was paused on toolhaead change and needs your attention.'
    PAUSE MOVE=0 MODE=1
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_PAUSE_ECHO_DETAILS]
gcode:
  {% if (printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set _LTC_PAUSE_CFG = printer["gcode_macro _LTC_PAUSE"] %}
    {% set dropoff_tool_number = _LTC_PAUSE_CFG.dropoff_tool_number %}
    {% set pickup_tool_number = _LTC_PAUSE_CFG.pickup_tool_number %}
    # RESPOND TYPE=echo MSG="Error while tool changing from T{dropoff_tool_number} to T{pickup_tool_number}. "
    # RESPOND TYPE=echo MSG="Please attach manually the tool `T{pickup_tool_number}` and "
    # RESPOND TYPE=echo MSG="call `LTC_PAUSE_RESOLVE T={pickup_tool_number}` macro after all done."
    # RESPOND TYPE=echo MSG="To check the sensors state, please use:"
    # RESPOND TYPE=echo MSG="`QUERY_BUTTON button=carriagesense_t{pickup_tool_number}`"
    # RESPOND TYPE=echo MSG="`QUERY_BUTTON button=docksense_t{pickup_tool_number}`"

    {action_respond_info(
      "Error while tool changing from T%s to T%s. \n"
      "Please attach manually the tool `T%s` and \n"
      "call `LTC_PAUSE_RESOLVE T=%s` macro after all done. \n"
      "To check the sensors state, please use: \n"
      "`QUERY_BUTTON button=carriagesense_t%s` \n"
      "`QUERY_BUTTON button=docksense_t%s` \n" %
      (dropoff_tool_number, pickup_tool_number,
      pickup_tool_number,
      pickup_tool_number,
      pickup_tool_number, pickup_tool_number)
    )}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_PAUSE_RESOLVE]
description: [T<tool_number>]
  Resumes after error on tool change but was resolved
  T= Current active toolhead number (0,1,2...)
gcode:
  {% if (not params.T is defined) %}
    {action_respond_info("_LTC_PAUSE_RESOLVE: Provide current active tool number [T<tool_number>].")}
  {% else %}
    {% set tool = printer['tool T' + params.T|string] %}
    {% set was_in_pause_state = printer["gcode_macro _LTC_PAUSE"].is_ltc_paused %}

    # it will set gcode ofset as well for initialised toolhead. calls `after_change_gcode` method
    INITIALIZE_TOOLCHANGER T={params.T}

    # FIX OFFSET for new tools.
    LTC_APPLY_GCODE_OFFSET T={params.T}

    # Pre-heat extruder.
    # {% if (printer.print_stats.state == "printing") %}
    # {% if printer['pause_resume'].is_paused|int == 1 %}
    {% if (printer["gcode_macro PRINT_START"].is_printing|int == 1) %}
      {% set tool_nozzle_temperature_initial = printer["gcode_macro " ~ params.T|string].nozzle_temperature_initial|default(0)|float %}
      {% set tool_nozzle_temperature = printer["gcode_macro " ~ params.T|string].nozzle_temperature|default(0)|float %}
      {% set is_primed = printer["gcode_macro PRINT_START"].is_primed|int %}
      {% if is_primed == 0 %}
        {action_respond_info("_LTC_PAUSE_RESOLVE: Pre-heat toolhead to INITIAL t=%.2f" % (tool_nozzle_temperature_initial))}
        S109 S{tool_nozzle_temperature_initial} T{params.T}
        #SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=toolhead_temp VALUE={tool_nozzle_temperature_initial}
      {% else %}
        {action_respond_info("_LTC_PAUSE_RESOLVE: Pre-heat toolhead to t=%.2f" % (tool_nozzle_temperature))}
        S109 S{tool_nozzle_temperature} T{params.T}
        #SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=toolhead_temp VALUE={tool_nozzle_temperature}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=toolhead_temp VALUE=0
    {% endif %}

    {% for tool_nr in printer.toolchanger.tool_numbers %}
      {% set tool_name = "T" + (tool_nr|string) %}
      SET_GCODE_VARIABLE MACRO={tool_name} VARIABLE=color VALUE="''"
    {% endfor %}
    {% set tool_name = "T" + (params.T|string) %}
    SET_GCODE_VARIABLE MACRO={tool_name} VARIABLE="color" VALUE="'c44'"

    SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=is_ltc_paused VALUE=0

    LTC_SET_CURRENT_AFTER_CHANGE

    {% set safe_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].safe_y|float %}
    {% set fast_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed|float %}
    {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}
    {% set cur_y = printer.toolhead.position[1]|float %}
    {% if cur_y < safe_y %}
      G0 Y{safe_y} F{fast_speed * speed_ratio}
    {% endif %}

    # Move to restore replace (if in pause state)
    # Save this place as PAUSE_STATE
    {% if printer.pause_resume.is_paused %}
      {% set CFG = printer["gcode_macro _LTC_PAUSE"] %}
      {% set restore_position_x = CFG.restore_position_x|float %}
      {% set restore_position_y = CFG.restore_position_y|float %}
      {% set restore_position_z = CFG.restore_position_z|float %}
      RESPOND TYPE=echo MSG="_LTC_PAUSE_RESOLVE: Restore position: x={restore_position_x} y={restore_position_y} z={restore_position_z}"
      _PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION PT={params.T} X={restore_position_x} Y={restore_position_y} Z={restore_position_z}

      LIFTBAR_LAYER_CHANGE

      M400 # TODO: Fix it
      RESTORE_GCODE_STATE NAME=_toolchange_state MOVE=0
      SAVE_GCODE_STATE NAME=PAUSE_STATE     # save current state becase it will be called in PUASE macros.
      _LTC_PAUSE_CLEAR
      SET_GCODE_VARIABLE MACRO="RESUME" VARIABLE=pause_mode VALUE=1

      RESUME
    {% endif %}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _LTC_PAUSE_CLEAR]
description: Clear all variables for pause state.
gcode:
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=is_ltc_paused VALUE=0
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=tool VALUE=-1
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=dropoff_tool_number VALUE=-1
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=pickup_tool_number VALUE=-1
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_x VALUE=-1
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_y VALUE=-1
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_z VALUE=-1
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_saved VALUE=0

# -------------------------------------------------------------------------
[gcode_macro _LTC_CHECK_DOCKING_STATE]
description: [T<tool_number>] [S<status>] [M<message>]
  Checks status to be match on toolhead dock sensor.
  T= Toolhead number (0,1,2...)
  S= Status to check (RELEASED, PRESSED)
  M= Message to displat on failare (optional)
gcode:
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% if (not params.T is defined) %}
      { action_raise_error("Provide T in format 0, 1, 2...") }
    {% endif %}

    {% if (not params.S is defined) %}
      { action_raise_error("Provide S in RELEASED or PRESSED") }
    {% endif %}

    {% set t = params.T|string %}
    {% set s = params.S|string %}

    {% set docksense = "docksense_t" + t %}
    {% set state = printer['gcode_button ' + docksense].state %}
    {% if state != s %}
      G4 P2000
      {% set state = printer['gcode_button ' + docksense].state %}
      {% if state != s %}
        {% set message = "ERROR: " + params.M|default("Dock status issue. Toolhead=%s. Current status=%s Asked=%s" % (t, state, s))|string %}
        { action_respond_info(message) }
        _LTC_PAUSE
        G4 P2000
      {% endif %}
    {% endif %}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _LTC_CHECK_CARRIAGE_STATE]
description: [T<tool_number>] [S<status>] [M<message>]
  Checks status to be match on toolhead carriage sensor.
  T= Toolhead number (0,1,2...)
  S= Status to check (RELEASED, PRESSED)
  M= Message to displat on failare (optional)
gcode:
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% if (not params.T is defined) %}
      { action_raise_error("Provide T in format 0, 1, 2...") }
    {% endif %}

    {% if (not params.S is defined) %}
      { action_raise_error("Provide S in RELEASED or PRESSED") }
    {% endif %}

    {% set t = params.T|string %}
    {% set s = params.S|string %}

    {% set carriagesense = "carriagesense_t" + t %}
    {% set state = printer['gcode_button ' + carriagesense].state %}
    {% if state != s %}
      G4 P2000
      {% set state = printer['gcode_button ' + carriagesense].state %}
      {% if state != s %}
        {% set message = "ERROR: " + params.M|default("Curriage status issue. Toolhead=%s. Current status=%s Asked=%s" % (t, state, s))|string %}
        { action_respond_info(message) }
        _LTC_PAUSE
      {% endif %}
    {% endif %}
  {% endif %}


# -------------------------------------------------------------------------
# SET/GET Methods
# -------------------------------------------------------------------------
[gcode_macro LTC_ECHO_OFFSET_REPORT]
gcode:
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    {% set tool_name = "T" + (tool_nr|string) %}
    {% set tool = printer["tool T" + (tool_nr|string)] %}
    {% set tool_x_offset = tool.gcode_x_offset %}
    {% set tool_y_offset = tool.gcode_y_offset %}
    {% set tool_z_offset = tool.gcode_z_offset %}
    {action_respond_info(
        "---------------------------------------------------------- \n"
        "G-code offsets for tool %s:\n"
        "gcode_x_offset: %.2f \n"
        "gcode_y_offset: %.2f \n"
        "gcode_z_offset: %.2f \n" % (
          tool_name, tool_x_offset, tool_y_offset, tool_z_offset
      ))}
  {% endfor %}
  { action_respond_info("----------------------------------------------------------") }

# -------------------------------------------------------------------------
[gcode_macro LTC_SAVE_GCODE_OFFSETS]
description: Save current gcode offsets from tool to configuration file.
gcode:
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    SAVE_TOOL_GCODE_OFFSETS T={tool_nr}
  {% endfor %}

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_TEMP]
description: [T<index>] [S<temperature>] [I<temperature>]
  Set tool temperature scheduled after tool change.
  T= Tool number.
  S= Target temperature.
  I= Initial Target temperature.
gcode:
  {% set tool = "T" + params.T|default(0)|string %}
  {% set temp = params.S|default(210)|int %}
  {% set initial_temp = params.S|default(210)|int %}
  {% if params.I is defined %}
    {% set initial_temp = params.I|int %}
  {% endif %}

  {% if printer["gcode_macro " + (tool|string)] %}
    SET_GCODE_VARIABLE MACRO={tool} VARIABLE=nozzle_temperature_initial VALUE={initial_temp}
    SET_GCODE_VARIABLE MACRO={tool} VARIABLE=nozzle_temperature VALUE={temp}
    RESPOND TYPE=echo MSG='SET TEMPERATURE: Tool {tool} t1={temp} t2={temp}'
  {% else %}
    # RESPOND TYPE=echo MSG='NO'
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_GET_TEMP]
description: [T<index>]
  Get tool temperature scheduled after tool change.
  T= Tool number.
gcode:
  {% set tool_name = "T" + params.T|default(0)|string %}
  {% if printer["gcode_macro " + (tool_name|string)] %}
    {% set tool_nozzle_temperature_initial = printer["gcode_macro " + (tool_name|string)].nozzle_temperature_initial|float|default(0) %}
    {% set tool_nozzle_temperature = printer["gcode_macro " + (tool_name|string)].nozzle_temperature|float|default(0) %}
    {action_respond_info("LTC_GET_TEMP: Tool %s temp_initial=%.2f temp=%.2f" %
      (tool_name, tool_nozzle_temperature_initial, tool_nozzle_temperature)
    )}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_SPEED_RATIO]
description: [R<ratio>]
  Set speed ratio for toolchaner operations.
  R= Speed Ratio.
gcode:
  {% set val = params.R|default(1)|float %}
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CONFIGURATION VARIABLE=speed_ratio VALUE={val}
  LTC_ECHO_SPEED_RATIO

# -------------------------------------------------------------------------
[gcode_macro LTC_ECHO_SPEED_RATIO]
gcode:
  RESPOND TYPE=echo MSG='`speed_ratio`={printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio}}'

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_FORCE_FULL_MOVE]
description: [F<flag>]
  Set flag to force liftbar move after tool change to all top.
  F= Flag, 1 - move all the way top, 0 - use safe distance to move.
gcode:
  {% if params.F is defined %}
    {% set val = params.F|int %}
    SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CONFIGURATION VARIABLE=force_full_up_move_on_change VALUE={val}
    LTC_ECHO_FORCE_FULL_MOVE
  {% else %}
    RESPOND TYPE=echo MSG='Parameter F (flag) is not specified.'
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_ECHO_FORCE_FULL_MOVE]
gcode:
  {action_respond_info("force_full_up_move_on_change=%.2f" %
    (printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].force_full_up_move_on_change)
  )}

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_SAFE_OFFSET]
description: [O<offset>]
  Set safe offset for liftbar.
  O= Offset as distance.
gcode:
  {% if params.O is defined %}
    {% set val = params.O|float %}
    SET_GCODE_VARIABLE MACRO=LIFTBAR_HOME VARIABLE=safe_offset VALUE={val}
    LTC_ECHO_SAFE_OFFSET
  {% else %}
    RESPOND TYPE=echo MSG='Parameter O (offset) is not specified.'
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_ECHO_SAFE_OFFSET]
gcode:
  {action_respond_info("safe_offset=%.2f" %
    (printer["gcode_macro LIFTBAR_HOME"].safe_offset)
  )}

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_OFFSET_ON_CHANGE]
description: [O<offset>]
  Set distance to raise liftbar after change.
  O= Offset as distance.
gcode:
  {% if params.O is defined %}
    {% set val = params.O|float %}
    SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CONFIGURATION VARIABLE=liftbar_safe_offset_on_change VALUE={val}
    LTC_ECHO_OFFSET_ON_CHANGE
  {% else %}
    RESPOND TYPE=echo MSG='Parameter O (offset) is not specified.'
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_ECHO_OFFSET_ON_CHANGE]
gcode:
  {action_respond_info("liftbar_safe_offset_on_change=%.2f" %
    (printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].liftbar_safe_offset_on_change)
  )}

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_WAIT_TEMP_DELTA]
description: [D<temperature_delta>]
  Set wait temperature delta.
  D= Temperature delta.
gcode:
  {% set delta = params.D|default(0)|float %}
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_CONFIGURATION VARIABLE=wait_temperature_delta VALUE={delta}
  LTC_ECHO_WAIT_TEMP_DELTA

# -------------------------------------------------------------------------
[gcode_macro LTC_ECHO_WAIT_TEMP_DELTA]
gcode:
  {action_respond_info("`wait_temperature_delta`=%.2f" %
    (printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].wait_temperature_delta)
  )}

# -------------------------------------------------------------------------
[gcode_macro LTC_ECHO_TOOL_TEMPERATURE]
gcode:
    {% set next_tool = printer['tool T' ~ params.T|string]  if params.T is defined else printer.toolchanger.tool%}
    {action_respond_info("LTC_ECHO_TOOL_TEMPERATURE: V1 Tool T%s TEMP=%.2f TARGET=%.2f" % (
        next_tool.tool_number,
        printer[next_tool.extruder].temperature,
        printer[next_tool.extruder].target
    ))}

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_FEEDRATE]
#rename_existing: M220.1
description: [S<percent>]
  Uses M220 command to set feedrate.
gcode:
  {% if params.S is defined %}
    {action_respond_info("LTC_SET_FEEDRATE: Set feedrate to %.2f" % (params.S|float))}
    SET_GCODE_VARIABLE MACRO="PRINT_START" VARIABLE=params_feedrate VALUE={params.S|float}
    M220 S{params.S|float}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_CURRENT_ON_CHANGE]
description: Change stepper run current for toolhead change process.
gcode:
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    SET_GCODE_VARIABLE MACRO="_TOOLCHANGER_CONFIGURATION" VARIABLE=run_current_x VALUE={printer.configfile.settings['tmc5160 stepper_x'].run_current|float}
    SET_GCODE_VARIABLE MACRO="_TOOLCHANGER_CONFIGURATION" VARIABLE=run_current_y VALUE={printer.configfile.settings['tmc5160 stepper_y'].run_current|float}
    SET_GCODE_VARIABLE MACRO="_TOOLCHANGER_CONFIGURATION" VARIABLE=run_current_z VALUE={printer.configfile.settings['tmc5160 stepper_z'].run_current|float}
    {% set change_current_x = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].change_current_x|float %}
    {% set change_current_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].change_current_y|float %}
    {% set change_current_z = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].change_current_z|float %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={change_current_x}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={change_current_y}
    # SET_TMC_CURRENT STEPPER=stepper_z CURRENT={change_current_z}
    # SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={change_current_z}
    # SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={change_current_z}
    # SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={change_current_z}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_SET_CURRENT_AFTER_CHANGE]
description: Restore stepper run current after toolhead change process.
gcode:
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set run_current_x = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].run_current_x|float %}
    {% set run_current_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].run_current_y|float %}
    {% set run_current_z = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].run_current_z|float %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={run_current_x}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={run_current_y}
    # SET_TMC_CURRENT STEPPER=stepper_z CURRENT={run_current_z}
    # SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={run_current_z}
    # SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={run_current_z}
    # SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={run_current_z}
  {% endif %}

[gcode_macro LTC_SET_TC_MODE]
gcode:
  #{% if ("y" in printer.toolhead.homed_axes) %}
  SET_GCODE_VARIABLE MACRO="LIFTBAR_HOME" VARIABLE=mode VALUE={params.MODE}
  LTC_ECHO_TC_MODE

[gcode_macro LTC_ECHO_TC_MODE]
gcode:
  {action_respond_info("LTC_ECHO_TC_MODE: Toolchanger (liftbar) mode is %s" %
    (printer["gcode_macro LIFTBAR_HOME"].mode)
  )}

[gcode_macro _LTC_IS_Y_HOMED]
gcode:
  {action_respond_info("_LTC_IS_Y_HOMED 1: Check toolhead Y is homed. Result: %s" %
    ("YES" if ("y" in printer.toolhead.homed_axes) else "NO")
  )}
  {action_respond_info("_LTC_IS_Y_HOMED 2: Check toolhead Y is homed. Result: %s" %
    ("YES" if (printer.toolhead.homed_axes == "y") else "NO")
  )}
  {% set force = params.FORCE|default(0)|int %}
  {% if ("y" not in printer.toolhead.homed_axes) and (force == 0) %}
    {action_respond_info("_LTC_IS_Y_HOMED 3:")}
  {% endif %}
  {% if (not ("y" in printer.toolhead.homed_axes)) and (force == 0) %}
    {action_respond_info("_LTC_IS_Y_HOMED 4:")}
  {% endif %}
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
[gcode_macro _LTC_VARIABLE_SET]
gcode:
  {% set macro = params.MACRO|string %}
  {% set var = params.VARIABLE|string %}
  {% set val = params.VALUE %}
  {% if printer["gcode_macro " + macro] %}
    SET_GCODE_VARIABLE MACRO={macro} VARIABLE={var} VALUE={val}
  {% else %}
    RESPOND TYPE=echo MSG='Macros {macro} was not found.'
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro LTC_VARIABLE_SET]
gcode:
  {% set var = params.VARIABLE|string %}
  {% set val = params.VALUE %}
  _TTC_VARIABLE_SET MACRO="_TOOLCHANGER_CONFIGURATION" VARIABLE={var} VALUE={val}

# -------------------------------------------------------------------------
[gcode_macro LTC_PURGE_TOOLHEAD_IF_NEEDED]
description: [FORCE<force_flag>] [TEMP<temperature>] [TEMP_END<temperature>]
  Purge current tool head with printing the line.
  FORCE= Flag to indicate if need to purge in NON-printing state.
  TEMP= Temperature to purge with
  TEMP_END= Temperature after purge
gcode:
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {action_respond_info("Running `LTC_PURGE_TOOLHEAD_IF_NEEDED` macros...")}
    SAVE_GCODE_STATE NAME=LTC_PURGE_TOOLHEAD_IF_NEEDED

    {% set force_purge = params.FORCE|default(0)|int %}
    {% set temp = params.TEMP|default(0)|int %}
    {% set temp_end = params.TEMP_END|default(temp)|int %}
    {% set max_purge_z = printer["gcode_macro MOVE_TO_PURGE_PLACE"].toolhead_purge_max_z_pos %}
    {% set wait_temperature_delta = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].wait_temperature_delta %}
    {% set tool = printer[printer.toolchanger.tool] %}
    {% set tool_number = tool.tool_number %}
    {% if (printer.print_stats.state == "printing") or (force_purge) %}
      {% set max_purge_z = printer["gcode_macro MOVE_TO_PURGE_PLACE"].toolhead_purge_max_z_pos %}
      {% if printer.toolhead.position.z <= max_purge_z %}
        {% if (tool.params_is_purged == 0) %}
          {% if printer.toolhead.position.z <= max_purge_z %}
            {% set cur_z = printer.toolhead.position.z %}
            # {% if temp > 0 %}
            #   M104 S{temp}
            # {% endif %}
            MOVE_TO_PURGE_PLACE
            CLEAN_NOZZLE
            PRIME_EXTRUDER TEMP={temp} TEMP_END={temp_end}
            WIPE_NOZZLE
            CLEAN_NOZZLE
            # MOVE_TO_PURGE_PLACE KEEP_BUCKET=1
            SET_TOOL_PARAMETER T={tool_number} PARAMETER="params_is_purged" VALUE=1
            {% set fast_speed_z = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed_z|float %}
            {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}
            G90 ; go absolute
            G1 Z{cur_z} F{fast_speed_z * speed_ratio}

            {% set restore_state = params.RESTORE_STATE|default(0)|int %}
            {% if restore_state %}
              {% set restore_move_speed = printer["gcode_macro PRINT_START"].restore_move_speed|default(60) %}
              RESTORE_GCODE_STATE NAME=LTC_PURGE_TOOLHEAD_IF_NEEDED MOVE=1 MOVE_SPEED={restore_move_speed}
            {% endif %}
          {% else %}
            {action_respond_info("LTC_PURGE_TOOLHEAD_IF_NEEDED: Cannot purge T%s. Toolhead is too high. Max allowed heigh is %.2f" %
              (tool_number, max_purge_z)
            )}
          {% endif %}
        {% else %}
          {action_respond_info("LTC_PURGE_TOOLHEAD_IF_NEEDED: Tool T%s was purged already. Skipping." %
            (tool_number)
          )}
        {% endif %}
      {% else %}
        {action_respond_info("LTC_PURGE_TOOLHEAD_IF_NEEDED: Cannot prime extruder. Toolhead is too high.")}
      {% endif %}
    {% else %}
      {action_respond_info("LTC_PURGE_TOOLHEAD_IF_NEEDED: Cannot purge T%s. Printer is not in printing state. To force it use FORCE=1 parameter." %
        (tool_number)
      )}
    {% endif %}
  {% endif %}



# -------------------------------------------------------------------------
#   OVERIDES FOR STANDARD FUNCTIONS
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE {newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
  {% else %}
    M109.1 {rawparams}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro SET_GCODE_OFFSET]
rename_existing: BASE_SET_GCODE_OFFSET
description: Overrides original method to set toolhead gcode offset if it was adjusted.
gcode:
  # {rawparams}
  {% set command_params =
  ((" X=" ~ params.X) if params.X is defined else "") ~
  ((" X_ADJUST=" ~ params.X_ADJUST) if params.X_ADJUST is defined else "") ~
  ((" Y=" ~ params.Y) if params.Y is defined else "") ~
  ((" Y_ADJUST=" ~ params.Y_ADJUST) if params.Y_ADJUST is defined else "") ~
  ((" Z=" ~ params.Z) if params.Z is defined else "") ~
  ((" Z_ADJUST=" ~ params.Z_ADJUST) if params.Z_ADJUST is defined else "") ~
  ((" MOVE=" ~ params.MOVE) if params.MOVE is defined else " MOVE=0") ~
  ((" MOVE_SPEED=" ~ params.MOVE_SPEED) if params.MOVE_SPEED is defined else "") %}

  BASE_SET_GCODE_OFFSET {command_params}
  {% set tool = printer[printer.toolchanger.tool] %}
  {% set current_tool_number = tool.tool_number %}
  {% set gcode_x_offset = tool.gcode_x_offset %}
  {% set gcode_y_offset = tool.gcode_y_offset %}
  {% set gcode_z_offset = tool.gcode_z_offset %}
  # { action_respond_info("T%s  SET_GCODE_OFFSET %s " % (current_tool_number, command_params)) }

  {% if params.X is defined %}
    # SET_TOOL_GCODE_X_OFFSET T={current_tool_number} VALUE={params.X}
  {% elif params.X_ADJUST is defined %}
    SET_TOOL_GCODE_X_OFFSET T={current_tool_number} VALUE={tool.gcode_x_offset|float + params.X_ADJUST|float}
  {% endif %}
  {% if params.Y is defined %}
    # SET_TOOL_GCODE_Y_OFFSET T={current_tool_number} VALUE={params.Y}
  {% elif params.Y_ADJUST is defined %}
    SET_TOOL_GCODE_Y_OFFSET T={current_tool_number} VALUE={tool.gcode_y_offset|float + params.Y_ADJUST|float}
  {% endif %}
  {% if params.Z is defined %}
    # SET_TOOL_GCODE_Z_OFFSET T={current_tool_number} VALUE={params.Z}
  {% elif params.Z_ADJUST is defined %}
    SET_TOOL_GCODE_Z_OFFSET T={current_tool_number} VALUE={tool.gcode_z_offset|float + params.Z_ADJUST|float}
  {% endif %}

  # If we adjust for tool 0 this offset should be applied to all other toolheads.
  {% if current_tool_number == 0 %}
    {% for tool_nr in printer.toolchanger.tool_numbers %}
      {% if tool_nr != current_tool_number %}
        {% set current_tool = printer['tool T' + tool_nr|string] %}
        {% if params.X is defined %}
          # SET_TOOL_GCODE_X_OFFSET T={tool_nr} VALUE={params.X}
        {% elif params.X_ADJUST is defined %}
          SET_TOOL_GCODE_X_OFFSET T={tool_nr} VALUE={current_tool.gcode_x_offset|float + params.X_ADJUST|float}
        {% endif %}
        {% if params.Y is defined %}
          # SET_TOOL_GCODE_Y_OFFSET T={tool_nr} VALUE={params.Y}
        {% elif params.Y_ADJUST is defined %}
          SET_TOOL_GCODE_Y_OFFSET T={tool_nr} VALUE={current_tool.gcode_y_offset|float + params.Y_ADJUST|float}
        {% endif %}
        {% if params.Z is defined %}
          # SET_TOOL_GCODE_Z_OFFSET T={tool_nr} VALUE={params.Z}
        {% elif params.Z_ADJUST is defined %}
          SET_TOOL_GCODE_Z_OFFSET T={tool_nr} VALUE={current_tool.gcode_z_offset|float + params.Z_ADJUST|float}
        {% endif %}
      {% endif %}
    {% endfor %}
  {% endif %}

