#######################################################################################################################################

# Sample macro config to be used in conjunction with the Decontaminator Purge Bucket & Nozzle Scrubber mod. Created by Hernsl 
# (hernsl#8860 on Discord) and edited by Edwardyeeks (edwardyeeks#6042 on Discord). Several ideas that made it as features by
# Deutherius (deutherius#3295 on Discord).

# The goal of this macro is to provide a nozzle scrubbing and purging routine that is easily copied/referenced into your  printer.cfg.
# Users can simply change parameters and enable/disable options in the first half. Descriptions are plentiful, making this macro
# look huge but informative and are laid out in sequence to be read first describing the line below; PLEASE READ CAREFULLY.

# This sample config assumes the following: The user has implemented the default decontaminator purge bucket & nozzle scrubber mod
# for the VORON 1/2. It can be tweaked to customised purge bucket geometries and brushes.

# Features in this macro: option of putting the bucket at the rear or front of the bed. Purge routine that can be enabled/disabled.
# By default, bucket is located at rear left of bed and purge routine is enabled. The purge and scrubbing routine is randomized
# in either left or right bucket to ensure as even as possible distribution of filament gunk.

# Default parameters are set for safe speeds and movements. Where necessary, tweak the parameters for the nozzle scrub procedure 
# to fit your printer.

# To avoid adding length of lines to your main printer.cfg config file, one can upload a config file separately into klipper and
# include it into the main printer config. Upload nozzle_scrub.cfg to the same directory as printer.cfg. Usually, it is in /home/pi/.
# Users of Fluidd, Mainsail and other klipper front ends would find it under /home/pi/klipper_config/.

# Once uploaded, add the following to your printer.cfg in the Macros section: [include /home/pi/nozzle_scrub.cfg] 
# Those running Fluidd, Mainsail and other front ends will need to use the following location instead:
# [include /home/pi/klipper_config/nozzle_scrub.cfg]

#######################################################################################################################################

# Name of the macro is clean_nozzle.

[gcode_macro _clean_nozzle_varables]
# If you are putting your purge bucket at the rear left of the bed as per default installation, 
# enable True on your location_bucket_rear variable. 
# If you want to put your purge bucket elsewhere (perhaps the front), then set it to False. 
# See diagrams and description further below on how to set your XY position.
variable_location_bucket_rear:      False

# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. The
# ooze dwell variable makes allowance for this. Update as necessary. If you decided to not enable purge, you can ignore this section.
variable_purge_len:            10	         ; Amount of filament, in mm, to purge.
variable_purge_spd:           150	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:      200	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:             1          ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:            1   		   ; Dwell/wait time, in seconds, after purging and retracting.

# Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_top:           2.6

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_clearance_z:           5	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:             7	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:       25000	       	 ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         3000	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        7000	         ; Nozzle wipe speed in mm/min.


# These parameters define the size of the brush. Update as necessary. A visual reference is provided below. Note that orientation of 
# parameters remain the same whether bucket is at rear or front.
# 
#                  ←   brush_width   →                            
#                   _________________                                                          ↑
#                  |                 |  ↑                     If you chose location_bucket_rear = True, Y position is acquired
#  brush_start (x) |                 | brush_depth            from your stepper_y position_max. Adjust your brush physically in
#                  |_________________|  ↓                               Y so that the nozzle scrubs within the brush.       
#                          (y)                                                                 ↓
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
variable_brush_start: 33
variable_brush_width: 32

# These are only used if location_bucket_rear is False. 
# You specify a custom location in y axis for your brush - see diagram above.
variable_brush_front: 22      
variable_brush_depth: 6          
variable_bucket_purge_y_positoin: 5 	; Y position where to purge 
        

# These parameters define the size of your purge bucket. Update as necessary. If you decided to not enable purge, you can ignore 
# this section. A visual reference is provided below. Note that orientation of parameters remain the same whether bucket is at rear 
# or front.
# 
#                                     bucket_gap
#                                      ← ---- →
#                     __________________________________________
#                    |                 |      |                 |      
#                    |                 |      |                 |
#  bucket_start (x)  |                 |______|                 |
#                    |                 |      |                 |
#                    |                 |      |                 |
#                    |_________________|. . . |_________________|
#                     ← ------------- →        ← ------------- →
#                     bucket_left_width        bucket_right_width
#  _______________________________________________________________________________________
#                                    PRINTER FRONT
variable_bucket_left_width:		25
variable_bucket_right_width:	25
variable_bucket_gap:					32
variable_bucket_start:				8

# --------------------------------------------
variable_brush_top_wiper:     3.5
variable_brush_start_wiper: 	77.5
variable_brush_width_wiper: 	10
variable_brush_front_wiper: 	15      
variable_brush_depth_wiper: 	10 
# --------------------------------------------

# Placeholder. The variable will later be set to contain, at random, 
# a number representing the left (0) or right (1) bucket.
variable_bucket_pos: 1
gcode:

# -------------------------------------------------------------------------
[gcode_macro MOVE_TO_PURGE_PLACE]
variable_toolhead_purge_max_z_pos: 100 	; the max height of toolhead when purge is possible.
gcode:
	{action_respond_info("Running `MOVE_TO_PURGE_PLACE` macro...")}
	{% set restore_state            = params.RESTORE_STATE|default(0)|int %}
	{% set keep_z                 	= params.KEEP_Z|default(1) %}
	{% set keep_bucket 			 				= params.KEEP_BUCKET|default(0) %}
	{% set safe_y                 	= params.SAFE_Y|default(1) %}			; when we use sensorless homing we need little offset from maxY position
	{% set safe_y_dist              = params.SAFE_Y_DIST|default(10)|int %}
	{% set location_bucket_rear   	= printer["gcode_macro _clean_nozzle_varables"].location_bucket_rear %}
	{% set brush_top              	= printer["gcode_macro _clean_nozzle_varables"].brush_top %}
	{% set clearance_z            	= printer["gcode_macro _clean_nozzle_varables"].clearance_z %}
	{% set wipe_qty               	= printer["gcode_macro _clean_nozzle_varables"].wipe_qty %}
	{% set prep_spd_xy            	= printer["gcode_macro _clean_nozzle_varables"].prep_spd_xy %}
	{% set prep_spd_z             	= printer["gcode_macro _clean_nozzle_varables"].prep_spd_z %}
	{% set wipe_spd_xy            	= printer["gcode_macro _clean_nozzle_varables"].wipe_spd_xy %}
	{% set brush_start            	= printer["gcode_macro _clean_nozzle_varables"].brush_start %}
	{% set brush_width            	= printer["gcode_macro _clean_nozzle_varables"].brush_width %}
	{% set brush_front            	= printer["gcode_macro _clean_nozzle_varables"].brush_front %}
	{% set brush_depth            	= printer["gcode_macro _clean_nozzle_varables"].brush_depth %}
	{% set bucket_left_width      	= printer["gcode_macro _clean_nozzle_varables"].bucket_left_width %}
	{% set bucket_right_width     	= printer["gcode_macro _clean_nozzle_varables"].bucket_right_width %}
	{% set bucket_gap             	= printer["gcode_macro _clean_nozzle_varables"].bucket_gap %}
	{% set bucket_start           	= printer["gcode_macro _clean_nozzle_varables"].bucket_start %}
	{% set bucket_pos             	= printer["gcode_macro _clean_nozzle_varables"].bucket_pos %}
	{% set bucket_purge_y_positoin  = printer["gcode_macro _clean_nozzle_varables"].bucket_purge_y_positoin %}

	SAVE_GCODE_STATE NAME=MOVE_TO_PURGE_PLACE

	{% set max_purge_z = printer["gcode_macro MOVE_TO_PURGE_PLACE"].toolhead_purge_max_z_pos %}
	{% if printer.toolhead.position.z <= max_purge_z %}
		LIFTBAR_CHECK_HOMED
		LIFTBAR_TO_TOP

		G90 ; go absolute	
		{% if keep_bucket|int == 0 %}
			# Randomly select left or right bin for purge. 0 = left, 1 = right
			SET_GCODE_VARIABLE MACRO=_clean_nozzle_varables VARIABLE=bucket_pos VALUE={(range(2) | random)}
		{% endif %}

		{% if keep_z|int == 1 %}
			# Do nothing, do not change z position.
			{action_respond_info("MOVE_TO_PURGE_PLACE : Keeping z position...")}
		{% else %}
			{action_respond_info("MOVE_TO_PURGE_PLACE : Changing z position...")}
			{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
			{% set raise_z = [printer.toolhead.position.z + clearance_z, max_z]|min %}
			G90     ; go absolute
			G0 Z{raise_z} F{prep_spd_z}		# raise head for safe z.
		{% endif %}
			
		# Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
		G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))} F{prep_spd_xy}
		{% if location_bucket_rear %}  
			# {% set position_max = printer.configfile.config["stepper_y"]["position_max"]|float %}
			# G1 Y{position_max - safe_y_dist} F{prep_spd_xy}
		{% else %}
			# G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
			G1 Y{bucket_purge_y_positoin} F{prep_spd_xy}
			G1 Z{brush_top + clearance_z} F{prep_spd_z}
		{% endif %}

		{% if restore_state %}
			{% set restore_move_speed = printer["gcode_macro PRINT_START"].restore_move_speed|default(60) %}
			RESTORE_GCODE_STATE NAME=MOVE_TO_PURGE_PLACE MOVE=1 MOVE_SPEED={restore_move_speed}
		{% endif %}
	{% else %}
		{action_respond_info("MOVE_TO_PURGE_PLACE: Cannot move to purge position. Toolhead is too high.")}
	{% endif %}
	
# -------------------------------------------------------------------------
[gcode_macro CLEAN_NOZZLE]
gcode:
	{action_respond_info("Running `CLEAN_NOZZLE` macro...")}
	{% set need_move_to_purge  			= params.NEED_MOVE_TO_PURGE|default(1) %}	; move to purge place by default
	{% set keep_z                 	= params.KEEP_Z|default(0) %}							; raise head by default while move to purge place
	{% set keep_bucket 			 				= params.KEEP_BUCKET|default(0) %}				; do not keep bucket by default while move to purge place
	{% set location_bucket_rear   	= printer["gcode_macro _clean_nozzle_varables"].location_bucket_rear %}
	{% set brush_top              	= printer["gcode_macro _clean_nozzle_varables"].brush_top %}
	{% set clearance_z            	= printer["gcode_macro _clean_nozzle_varables"].clearance_z %}
	{% set wipe_qty               	= printer["gcode_macro _clean_nozzle_varables"].wipe_qty %}
	{% set prep_spd_xy            	= printer["gcode_macro _clean_nozzle_varables"].prep_spd_xy %}
	{% set prep_spd_z             	= printer["gcode_macro _clean_nozzle_varables"].prep_spd_z %}
	{% set wipe_spd_xy            	= printer["gcode_macro _clean_nozzle_varables"].wipe_spd_xy %}
	{% set brush_start            	= printer["gcode_macro _clean_nozzle_varables"].brush_start %}
	{% set brush_width            	= printer["gcode_macro _clean_nozzle_varables"].brush_width %}
	{% set brush_front            	= printer["gcode_macro _clean_nozzle_varables"].brush_front %}
	{% set brush_depth            	= printer["gcode_macro _clean_nozzle_varables"].brush_depth %}
	{% set bucket_left_width      	= printer["gcode_macro _clean_nozzle_varables"].bucket_left_width %}
	{% set bucket_right_width     	= printer["gcode_macro _clean_nozzle_varables"].bucket_right_width %}
	{% set bucket_gap            	= printer["gcode_macro _clean_nozzle_varables"].bucket_gap %}
	{% set bucket_start           	= printer["gcode_macro _clean_nozzle_varables"].bucket_start %}
	{% set bucket_pos             	= printer["gcode_macro _clean_nozzle_varables"].bucket_pos %}
	{% set bucket_purge_y_positoin  = printer["gcode_macro _clean_nozzle_varables"].bucket_purge_y_positoin %}
   
	{% if printer.toolhead.homed_axes == "xyz" %}
		{action_respond_info("CLEAN_NOZZLE: Cleaning nozzle...")}		
		{% set max_purge_z = printer["gcode_macro MOVE_TO_PURGE_PLACE"].toolhead_purge_max_z_pos %}
		{% if printer.toolhead.position.z <= max_purge_z %}
			SAVE_GCODE_STATE NAME=CLEAN_NOZZLE           #	Save the gcode state in this macro instance.
			G90	; go absolute

			LIFTBAR_CHECK_HOMED
			LIFTBAR_TO_TOP
			
			{% if need_move_to_purge|int == 1 %}
				# {action_respond_info("CLEAN_NOZZLE: Moving to purge place...")}
				# MOVE_TO_PURGE_PLACE KEEP_Z={keep_z} KEEP_BUCKET={keep_bucket}	
			{% endif %}
			
			# Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
			G90	; go absolute
			G1 Y{brush_front + (brush_depth / 2) - (range(3) | random)} F{prep_spd_xy}
			G1 Z{brush_top + clearance_z} F{prep_spd_z}
			G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}
			G1 Z{brush_top} F{prep_spd_z}	; Move nozzle down into brush.

			# Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
			{% for wipes in range(1, (wipe_qty + 1)) %}
				G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
				G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
				G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
				G1 Y{brush_front + (brush_depth / 2) - (range(3) | random)} F{prep_spd_xy}
			{% endfor %}

			{action_respond_info("CLEAN_NOZZLE: Nozzle is cleaned.") }
			G1 Z{brush_top + clearance_z} F{prep_spd_z}

			# Return to purge position.
			# G1 Y{bucket_purge_y_positoin} F{prep_spd_xy}

			# Restore the gcode state to how it was before the macro.
			{% set restore_move_speed = printer["gcode_macro PRINT_START"].restore_move_speed|default(60) %}
			# RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE MOVE=1 MOVE_SPEED={restore_move_speed}
		{% else %}
			{action_respond_info("CLEAN_NOZZLE: Cannot clean nozzle. Toolhead is too high.")}
		{% endif %}
	{% else %}
		{ action_raise_error("Must Home Axis First!") }
	{% endif %}

[gcode_macro WIPE_NOZZLE]
gcode:
	{action_respond_info("Running `WIPE_NOZZLE` macro...")}
	{% set need_move_to_purge  			= params.NEED_MOVE_TO_PURGE|default(1) %}	; move to purge place by default
	{% set keep_z                 	= params.KEEP_Z|default(0) %}							; raise head by default while move to purge place
	{% set keep_bucket 			 				= params.KEEP_BUCKET|default(0) %}				; do not keep bucket by default while move to purge place
	{% set location_bucket_rear   	= printer["gcode_macro _clean_nozzle_varables"].location_bucket_rear %}	
	{% set clearance_z            	= printer["gcode_macro _clean_nozzle_varables"].clearance_z %}
	{% set wipe_qty               	= printer["gcode_macro _clean_nozzle_varables"].wipe_qty %}
	{% set prep_spd_xy            	= printer["gcode_macro _clean_nozzle_varables"].prep_spd_xy %}
	{% set prep_spd_z             	= printer["gcode_macro _clean_nozzle_varables"].prep_spd_z %}
	{% set wipe_spd_xy            	= printer["gcode_macro _clean_nozzle_varables"].wipe_spd_xy %}
	{% set bucket_left_width      	= printer["gcode_macro _clean_nozzle_varables"].bucket_left_width %}
	{% set bucket_right_width     	= printer["gcode_macro _clean_nozzle_varables"].bucket_right_width %}
	{% set bucket_gap            		= printer["gcode_macro _clean_nozzle_varables"].bucket_gap %}
	{% set bucket_start           	= printer["gcode_macro _clean_nozzle_varables"].bucket_start %}
	{% set bucket_pos             	= printer["gcode_macro _clean_nozzle_varables"].bucket_pos %}
	{% set bucket_purge_y_positoin  = printer["gcode_macro _clean_nozzle_varables"].bucket_purge_y_positoin %}

	{% set brush_top_wiper          = printer["gcode_macro _clean_nozzle_varables"].brush_top_wiper %}
	{% set brush_start_wiper        = printer["gcode_macro _clean_nozzle_varables"].brush_start_wiper %}
	{% set brush_width_wiper        = printer["gcode_macro _clean_nozzle_varables"].brush_width_wiper %}
	{% set brush_front_wiper        = printer["gcode_macro _clean_nozzle_varables"].brush_front_wiper %}
	{% set brush_depth_wiper        = printer["gcode_macro _clean_nozzle_varables"].brush_depth_wiper %}

   
	{% if printer.toolhead.homed_axes == "xyz" %}
		{action_respond_info("WIPE_NOZZLE: Wiping nozzle...")}		
		{% set max_purge_z = printer["gcode_macro MOVE_TO_PURGE_PLACE"].toolhead_purge_max_z_pos %}
		{% if printer.toolhead.position.z <= max_purge_z %}
			SAVE_GCODE_STATE NAME=WIPE_NOZZLE           #	Save the gcode state in this macro instance.
			G90	; go absolute

			LIFTBAR_CHECK_HOMED
			LIFTBAR_TO_TOP
			
			# Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
			G90	; go absolute
			G1 Y{brush_front_wiper + (brush_depth_wiper / 2)} F{prep_spd_xy}
			G1 Z{brush_top_wiper + clearance_z} F{prep_spd_z}
			G1 X{brush_start_wiper + (brush_width_wiper * bucket_pos)} F{prep_spd_xy}
			G1 Z{brush_top_wiper} F{prep_spd_z}	; Move nozzle down into brush.

			# Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
			{% for wipes in range(1, (wipe_qty + 1)) %}
				G1 X{brush_start_wiper + (brush_width_wiper * (1 - bucket_pos))} F{wipe_spd_xy}
				G1 X{brush_start_wiper + (brush_width_wiper * bucket_pos)} F{wipe_spd_xy}
				G1 X{brush_start_wiper + (brush_width_wiper * bucket_pos)} F{wipe_spd_xy}
				G1 Y{brush_front_wiper + (brush_depth_wiper / 2)} F{prep_spd_xy}
			{% endfor %}

			{action_respond_info("WIPE_NOZZLE: Nozzle is wiped.") }
			G1 Z{brush_top_wiper + clearance_z} F{prep_spd_z}

			# Return to purge position.
			# G1 Y{bucket_purge_y_positoin} F{prep_spd_xy}

			# Restore the gcode state to how it was before the macro.
			{% set restore_move_speed = printer["gcode_macro PRINT_START"].restore_move_speed|default(60) %}
			# RESTORE_GCODE_STATE NAME=WIPE_NOZZLE MOVE=1 MOVE_SPEED={restore_move_speed}
		{% else %}
			{action_respond_info("WIPE_NOZZLE: Cannot wipe nozzle. Toolhead is too high.")}
		{% endif %}
	{% else %}
		{ action_raise_error("Must Home Axis First!") }
	{% endif %}

# -------------------------------------------------------------------------
[gcode_macro PURGE_NOZZLE]
gcode:
	{% set need_move_to_purge  			= params.NEED_MOVE_TO_PURGE|default(1) %}		# move to purge place by default
	{% set keep_z                 	= params.KEEP_Z|default(0) %}								# raise head by default while move to purge place
	{% set keep_bucket 			 				= params.KEEP_BUCKET|default(0) %}					# do not keep bucket by default while move to purge place
	{% set temp                   	= params.TEMP|default(0)|int %}
	{% set purge_len              	= printer["gcode_macro _clean_nozzle_varables"].purge_len %}
	{% set length                 	= params.LENGTH|default(purge_len)|int %}
	{% set purge_spd              	= printer["gcode_macro _clean_nozzle_varables"].purge_spd %}
	{% set purge_temp_min         	= printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
	{% set purge_ret              	= printer["gcode_macro _clean_nozzle_varables"].purge_ret %}
	{% set ooze_dwell             	= printer["gcode_macro _clean_nozzle_varables"].ooze_dwell %}
	{% set location_bucket_rear   	= printer["gcode_macro _clean_nozzle_varables"].location_bucket_rear %}
	{% set brush_top              	= printer["gcode_macro _clean_nozzle_varables"].brush_top %}
	{% set clearance_z            	= printer["gcode_macro _clean_nozzle_varables"].clearance_z %}
	{% set wipe_qty               	= printer["gcode_macro _clean_nozzle_varables"].wipe_qty %}
	{% set prep_spd_xy            	= printer["gcode_macro _clean_nozzle_varables"].prep_spd_xy %}
	{% set prep_spd_z             	= printer["gcode_macro _clean_nozzle_varables"].prep_spd_z %}
	{% set wipe_spd_xy            	= printer["gcode_macro _clean_nozzle_varables"].wipe_spd_xy %}
	{% set brush_start            	= printer["gcode_macro _clean_nozzle_varables"].brush_start %}
	{% set brush_width            	= printer["gcode_macro _clean_nozzle_varables"].brush_width %}
	{% set brush_front            	= printer["gcode_macro _clean_nozzle_varables"].brush_front %}
	{% set brush_depth            	= printer["gcode_macro _clean_nozzle_varables"].brush_depth %}
	{% set bucket_left_width      	= printer["gcode_macro _clean_nozzle_varables"].bucket_left_width %}
	{% set bucket_right_width     	= printer["gcode_macro _clean_nozzle_varables"].bucket_right_width %}
	{% set bucket_gap             	= printer["gcode_macro _clean_nozzle_varables"].bucket_gap %}
	{% set bucket_start           	= printer["gcode_macro _clean_nozzle_varables"].bucket_start %}
	{% set bucket_pos             	= printer["gcode_macro _clean_nozzle_varables"].bucket_pos %}

	{% if printer.toolhead.homed_axes == "xyz" %}
		{action_respond_info("Running `PURGE_NOZZLE` macro...")}

		SAVE_GCODE_STATE NAME=PURGE_NOZZLE		# Save the gcode state in this macro instance.
		G90	; go absolute

		LIFTBAR_CHECK_HOMED
		LIFTBAR_TO_TOP
		
		{% if need_move_to_purge|int == 1 %}
			# {action_respond_info("PURGE_NOZZLE: Moving to purge place...")}
			# MOVE_TO_PURGE_PLACE KEEP_Z={keep_z} KEEP_BUCKET={keep_bucket} 
		{% endif %}
		
		G90	; go absolute
		{% if temp > 0 %}                   	# If extruder turned off.
			{action_respond_info("PURGE_NOZZLE: Heating head...")}
			{% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
			M109 S{temp} T{current_tool_number} # Wait for extruder temperature.
		{% endif %}

		{% if printer.extruder.temperature >= purge_temp_min %}
			M83                              		# Go to relative mode.
			G1 E{length} F{purge_spd}
			G1 E-{purge_ret} F{purge_spd * 5}
			G4 P{ooze_dwell * 1000}
			G92 E0   														# reset extruder
		{% else %}
			{% if (printer.print_stats.state == "printing") %}
				PAUSE
			{% else %}
				{ action_raise_error("The temperature is not enouth to purge!") }
			{% endif %}			
		{% endif %}
   
		{action_respond_info("PURGE_NOZZLE: Nozzle purged.")}
			
		{% set restore_move_speed = printer["gcode_macro PRINT_START"].restore_move_speed|default(60) %}
		# RESTORE_GCODE_STATE NAME=PURGE_NOZZLE MOVE=1 MOVE_SPEED={restore_move_speed}
	{% else %}
		{ action_raise_error("Must Home Axis First!") }
	{% endif %}

# -------------------------------------------------------------------------
[gcode_macro PURGE_BLOB]
gcode:
	LIFTBAR_CHECK_HOMED
	LIFTBAR_TO_TOP

	# This is for a 300mm bed. If you have a diferent bed size you may want to adjust the line below
  {% set rand_pos = (105 + ( printer.system_stats.cputime * 1000 ) % 60) %}           ; Generate pseudo random start pos so we dont wear out that one spot on the bed. 
	M117 Purging at X{ rand_pos }                                                       
	
	# The start pos will be within the "handle" of the flex plate where there is some extra Y space available so we can go all the way to Y0
	# If your setup does not have this extra space then just increase the y valie in the line "G1 X{ rand_pos } Y0 Z1 F18000"
	G92 E0                          ; zero the extruder
	G90                             ; absolute positioning
	# G1 X{ rand_pos } Y0 Z1 F18000	; Go to start pos for purge line
	G1 X77.5 Y60 F18000   					; Go to start pos for purge line
	G1 Z1 F3000
	G1 Z0.4 F600                    ; Lower to purge height
	G91                             ; relative positioning
	G1 X5 E40 F40                   ; Extrude blob of filament on the bed
	M106 P0                         ; Enable Cooling Fan
	G1 X20 Z5 F100                  ; Slow drag away from the blob with fans helping cool and break strings. Also raiz z zo the blob clears the fan duct
	G1 X5  Z-5.1 F9000              ; Now that the blob has cleared the duct we go back down for a short 0.3mm height extrusion
	G1 X5 E2 F180                   ; Slow 5mm extrude move to help with stringing
	G1 X30 E-1 F6000                ; Fast move and retract to break strings and reduce ooze
	G1 Z1 F100                      ; Lift
	M106 P0 S0                      ; Disable Cooling Fan
	G92 E0                          ; zero the extruder
	G90                             ; absolute positioning

# -------------------------------------------------------------------------
[gcode_macro PRIME_EXTRUDER]
variable_pos_x: 115
variable_pos_y: 35
variable_pos_z: 0.3
gcode:
	{% set restore_state = params.RESTORE_STATE|default(0)|int %}
	{% set turn_off = params.OFF|default(0)|int %}
	{% set temp = params.TEMP|default(0)|int %}
	{% set tool_number = params.T|default(printer[printer.toolchanger.tool].tool_number)|int %}
	
	SAVE_GCODE_STATE NAME=PRIME_EXTRUDER

	{% set max_purge_z = printer["gcode_macro MOVE_TO_PURGE_PLACE"].toolhead_purge_max_z_pos %}
	{% if printer.toolhead.position.z <= max_purge_z %}
		LIFTBAR_CHECK_HOMED
		LIFTBAR_TO_TOP
		_PRIME_CURRENT_EXTRUDER T={tool_number} RESTORE_STATE={restore_state} OFF={turn_off} TEMP={temp}
	{% else %}
		{action_respond_info("PRIME_EXTRUDER: Cannot prime extruder. Toolhead is too high.")}
	{% endif %}

[gcode_macro _PRIME_CURRENT_EXTRUDER]
gcode:
	{% set restore_state = params.RESTORE_STATE|default(0)|int %}
	{% set turn_off = params.OFF|default(0)|int %}
	{% set temp = params.TEMP|default(0)|int %}
	{% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}

	{% set tool = printer['tool T' + params.T|string] if (params.T is defined) else 
								printer[printer.toolchanger.tool] %}
	{% set tool_number = tool.tool_number %}
	{% set pos_x = printer["gcode_macro PRIME_EXTRUDER"].pos_x %}
	{% set pos_y = printer["gcode_macro PRIME_EXTRUDER"].pos_y %}
	{% set pos_z = printer["gcode_macro PRIME_EXTRUDER"].pos_z %}
	{% set tool_pos_y = pos_y + tool_number|int * 4 %}	
	
	{action_respond_info("_PRIME_CURRENT_EXTRUDER: extruder t=%.2f" % (printer[tool.extruder].temperature))}

	{% if temp > 0 %}
		M109 S{temp}
	{% endif %}

	{% if printer[tool.extruder].temperature >= purge_temp_min %}
		G90 ; go absolute
		G1 Z10 F3000
		G1 X{pos_x} Y{tool_pos_y} F25000
		G1 Z{pos_z} F3000

		G92 E0 ;Reset Extruder
		G91 ; go relative
		G1 X130 F1500.0 E30							; line 1
		G1 Y{0.4} F25000
		G90 ; go absolute
		G1 X{pos_x} F1500.0 E30					; line 2
		G92 E0 ;Reset Extruder
		G1 Z10 F3000

		{% if turn_off %}
			M109 S0
		{% endif %}
	{% endif %}

	{% if restore_state %}
		{% set restore_move_speed = printer["gcode_macro PRINT_START"].restore_move_speed|default(60) %}
		RESTORE_GCODE_STATE NAME=PRIME_EXTRUDER MOVE=1 MOVE_SPEED={restore_move_speed}
	{% endif %}

[gcode_macro LTC_ECHO_TOOL_TEMPERATURE]
gcode:
	{% set next_tool = printer['tool T' + params.T|string]  if params.T is defined else printer.toolchanger.tool%}	
	{action_respond_info("LTC_ECHO_TOOL_TEMPERATURE: V1 Tool T%s TEMP=%.2f TARGET=%.2f" % (
		next_tool.tool_number, 
		printer[next_tool.extruder].temperature, 
		printer[next_tool.extruder].target
	))}

[gcode_macro DEEP_CLEAN_NOZZLE]
gcode:
	{action_respond_info("Running `DEEP_CLEAN_NOZZLE` macro...")}
	{% if (printer.print_stats.state == "printing") %}
		{action_respond_info("DEEP_CLEAN_NOZZLE: Cannot deep clean nozzle while prining.")}
	{% else %}
		LIFTBAR_CHECK_HOMED
		_DEEP_CLEAN_NOZZLE_PRE_HEAT
		LIFTBAR_TO_TOP
		MOVE_TO_PURGE_PLACE
		_DEEP_CLEAN_NOZZLE_RETRACT
		CLEAN_NOZZLE
		_DEEP_CLEAN_NOZZLE_CLEAN
		MOVE_TO_CENTER
	{% endif %}

[gcode_macro _DEEP_CLEAN_NOZZLE_PRE_HEAT]
gcode:
	{% set tool = printer[printer.toolchanger.tool] %}
	{% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
	{% if printer[tool.extruder].temperature <= purge_temp_min %}
		{action_respond_info("_DEEP_CLEAN_NOZZLE_PRE_HEAT: 104 T%s S%.2f..." % (tool.tool_number, purge_temp_min))}
		M104 T{tool.tool_number} S{purge_temp_min}
	{% endif %}

[gcode_macro _DEEP_CLEAN_NOZZLE_RETRACT]
gcode:
	{% set tool = printer[printer.toolchanger.tool] %}
	{% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
	{% if printer[tool.extruder].temperature <= purge_temp_min %}
		{action_respond_info("_DEEP_CLEAN_NOZZLE_RETRACT: M109 T%s S%.2f..." % (tool.tool_number, purge_temp_min))}
		M109 T{tool.tool_number} S{purge_temp_min}
	{% endif %}
	G92 E0 ;Reset Extruder
	G91 ; go relative
	G1 E-5 F1500.0
	G90 ; go absolute

[gcode_macro _DEEP_CLEAN_NOZZLE_CLEAN]
gcode:
	{% set tool = printer[printer.toolchanger.tool] %}
	{% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
	M104 T{tool.tool_number} S0
	M106 P0 ; Enable Cooling Fan
	{% for moves in range(10) %}
		{% if printer[tool.extruder].temperature > 140 %}
			WIPE_NOZZLE
			_DEEP_CLEAN_WAIT
			CLEAN_NOZZLE
		{% endif %}
	{% endfor %}
	M106 P0 S0 ; Disable Cooling Fan  

[gcode_macro _DEEP_CLEAN_WAIT]
gcode:
	{% set tool = printer[printer.toolchanger.tool] %}
	{action_respond_info("_DEEP_CLEAN_NOZZLE_CLEAN: T%s -> Current temperatur=%.2f..." % (tool.tool_number, printer[tool.extruder].temperature))}
	{action_respond_info("_DEEP_CLEAN_NOZZLE_CLEAN: T%s -> Current target temperatur=%.2f..." % (tool.tool_number, printer[tool.extruder].target))}
	G4 P2000	; wait for 2 seconds.

# -----------------------------------------

[gcode_macro DEEP_CLEAN_ALL_NOZZLE]
gcode:
	{action_respond_info("Running `DEEP_CLEAN_ALL_NOZZLE` macro...")}
	{% if (printer.print_stats.state == "printing") %}
		{action_respond_info("DEEP_CLEAN_ALL_NOZZLE: Cannot deep clean nozzle while prining.")}
	{% else %}
		{% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
		{% for tool_nr in printer.toolchanger.tool_numbers %}
			{action_respond_info("DEEP_CLEAN_ALL_NOZZLE: Cleaning tool T%s..." % (tool_nr))}
			{% set next_tool = printer['tool T' + tool_nr|string] %}
  		_DEEP_CLEAN_ALL_NOZZLE_PRE_HEAT T={tool_nr}
  		MOVE_TO_CENTER
  		T{tool_nr}
  		LIFTBAR_TO_TOP
  		MOVE_TO_PURGE_PLACE
			_DEEP_CLEAN_ALL_NOZZLE_RETRACT T={tool_nr}
			CLEAN_NOZZLE
			_DEEP_CLEAN_ALL_NOZZLE_CLEAN T={tool_nr}
		{% endfor %}
		MOVE_TO_CENTER
		T0
	{% endif %}

[gcode_macro _DEEP_CLEAN_ALL_NOZZLE_PRE_HEAT]
gcode:
	{% set next_tool = printer['tool T' + params.T|string] %}
	{% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
	{% if printer[next_tool.extruder].temperature <= purge_temp_min %}
		{action_respond_info("DEEP_CLEAN_ALL_NOZZLE: 104 T%s S%.2f..." % (params.T, purge_temp_min))}
		M104 S{purge_temp_min} T{params.T}
	{% endif %}

[gcode_macro _DEEP_CLEAN_ALL_NOZZLE_RETRACT]
gcode:
	{% set next_tool = printer['tool T' + params.T|string] %}
	{% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
	{% if printer[next_tool.extruder].temperature <= purge_temp_min %}
		{action_respond_info("DEEP_CLEAN_ALL_NOZZLE: M109 T%s S%.2f..." % (params.T, purge_temp_min))}
		M109 S{purge_temp_min} T{params.T}
	{% endif %}
	G92 E0 ;Reset Extruder
	G91 ; go relative
	G1 E-5 F1500.0
	G90 ; go absolute

[gcode_macro _DEEP_CLEAN_ALL_NOZZLE_CLEAN]
gcode:
	{% set next_tool = printer['tool T' + params.T|string] %}
	{% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
	M104 S0 T{params.T}
	M106 P0 ; Enable Cooling Fan
	{% for moves in range(10) %}
		{% if printer[next_tool.extruder].temperature > 140 %}
			G4 P2000	; wait for 2 seconds.
			{action_respond_info("DEEP_CLEAN_ALL_NOZZLE: T%s -> Current temperatur=%.2f..." % (params.T, printer[next_tool.extruder].temperature))}
			{action_respond_info("DEEP_CLEAN_ALL_NOZZLE: T%s -> Current target temperatur=%.2f..." % (params.T, printer[next_tool.extruder].target))}
			CLEAN_NOZZLE
		{% endif %}
	{% endfor %}
	M106 P0 S0 ; Disable Cooling Fan  


