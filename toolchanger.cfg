
[gcode_macro _TOOLCHANGER_CONFIGURATION]
variable_raise_toolhead_dist: 5               # distance to raise a toolhead before start tool changing.
variable_wait_temperature_delta: 20           # lower the temperature of toolhead while not printing.
variable_use_round_path: 0
variable_safe_y: 130                          # Minimum Y
variable_safe_y_no_tool: 80                   # Minimum Y when toolhead is not attached
variable_close_y: 75                          #
variable_z_up_down_move: 10                   # used for horizontal move # SC: 14
variable_fast_speed: 30000
variable_fast_speed_z: 5100
variable_parking_speed: 7000
variable_end_parking_speed: 1000
variable_cleaning_speed: 10000
variable_speed_ratio: 1.0                      # Ratio which affects all phases of tool changing process.
variable_liftbar_safe_offset_on_change: 100   # How far move lieftbar to top after tool change.
variable_force_full_up_move_on_change: 0      # If true=1 liftbar moves full way top after each change.
variable_run_current_x: 0
variable_run_current_y: 0
variable_run_current_z: 0
variable_change_current_x: 1.8
variable_change_current_y: 1.8
variable_change_current_z: 1.8
gcode:

[toolchanger]
  t_command_restore_axis: ZYX
  # ---------------------------------------------------------------------------
  # params_*:
    # Extra params to pass to pickup/dropoff gcode. Accessible in the gcode via
    # `toolchanger.params_name`.
    # Also will be copied to any tools for this toolchanger with local values overriding.
  # params_path_speed: 150 #300
  # Default shaper params
  # params_input_shaper_freq_x: 62.4
  # params_input_shaper_freq_y: 88.6
  # ---------------------------------------------------------------------------
  # save_current_tool: false
    # If set, saves currently selected tool and makes it available for initialize gcode.
  initialize_gcode:
    #  Gcode to run on initialize. Typically used for homing any motors, or reselecting saved tool.
    # DETECT_ACTIVE_TOOL_PROBE
    # _INITIALIZE_FROM_DETECTED_TOOL
    # INITIALIZE_TOOLCHANGER T=0
  initialize_on: manual
    # When this toolchanger gets initialized.
    #  - manual: only when INITIALIZE_TOOLCHANGER is called.
    #  - home: when homing the printer.
    #  - first-use: on first toolchange command.

  # ------------------------------------------------------------------------
  before_change_gcode:
  # ------------------------------------------------------------------------
    # dropoff_tool and pickup_tool are in format `tool T1`, `tool T2` etc.
    {% set dropoff_tool_number = dropoff_tool|string|replace('tool T', '') %} # dropoff_tool as 0 1 N
    {% set pickup_tool_number = pickup_tool|string|replace('tool T', '') %}   # pickup_tool as 0 1 N
    {% set restore_position_x = restore_position.X|float if 'X' in restore_position else -1 %}
    {% set restore_position_y = restore_position.Y|float if 'Y' in restore_position else -1 %}
    {% set restore_position_z = restore_position.Z|float if 'Z' in restore_position else -1 %}

    _DROPOFF_BEFORE_CHANGE DT={dropoff_tool_number} PT={pickup_tool_number} X={restore_position_x} Y={restore_position_y} Z={restore_position_z}

  # ------------------------------------------------------------------------
  dropoff_gcode:
  # ------------------------------------------------------------------------
    RESPOND TYPE=echo MSG='dropoff_gcode: Dropping off {tool.name}'
    # RESPOND TYPE=echo MSG='Position x:{tool.params_park_x|float} y:{tool.params_park_y|float} z:{tool.params_park_y|float} -> gcode_z_offset:{tool.gcode_z_offset}'

    G90
    LIFTBAR_CHECK_HOMED
    _DROPOFF_RAISE_TOOLHED DT={tool.tool_number}
    _DROPOFF_MOVE_TO_CLOSE_POSITION DT={tool.tool_number}
    _DROPOFF_MOVE_TO_PARK_POSITION DT={tool.tool_number}
    LTC_SET_CURRENT_ON_CHANGE
    _DROPOFF_MOVE_DOWN_ON_PARK_POSITION DT={tool.tool_number}
    SET_GCODE_VARIABLE MACRO="PRINT_START" VARIABLE=tc_no_tool_attached VALUE=1
    _DROPOFF_MOVE_BACK_TO_SAFE_POSITION DT={tool.tool_number}

  # ------------------------------------------------------------------------
  pickup_gcode:
  # ------------------------------------------------------------------------
    RESPOND TYPE=echo MSG='pickup_gcode: Picking up {tool.name}'

    G90 ; go absolute
    LIFTBAR_CHECK_HOMED
    _LTC_CHECK_CARRIAGE_STATE T={tool.tool_number} S="RELEASED" M="pickup_gcode: Cannot take tool T{tool.tool_number} because it is ALREADY on carriage."
    _LTC_CHECK_DOCKING_STATE T={tool.tool_number} S="PRESSED" M="pickup_gcode: Cannot take tool T{tool.tool_number} because it is not docked."
    _PICKUP_PREHEAT_TOOL PT={tool.tool_number}
    _PICKUP_MOVE_TO_CLOSE_POSITION PT={tool.tool_number}
    _PICKUP_MOVE_TO_PARK_POSITION PT={tool.tool_number}
    _PICKUP_MOVE_UP_ON_PARK_POSITION PT={tool.tool_number}
    LTC_SET_CURRENT_AFTER_CHANGE

    {% set command_params = ((" RESTORE_Z=" ~ restore_position.Z) if ((restore_position) and ('Z' in restore_position)) else "") %}
    _PICKUP_MOVE_BACK_TO_SAFE_POSITION PT={tool.tool_number} {command_params}

    SET_GCODE_VARIABLE MACRO="PRINT_START" VARIABLE=tc_no_tool_attached VALUE=0

    {% set command_params =
    ((" X=" ~ restore_position.X) if ((restore_position) and ('X' in restore_position)) else "") ~
    ((" Y=" ~ restore_position.Y) if ((restore_position) and ('Y' in restore_position)) else "") ~
    ((" Z=" ~ restore_position.Z) if ((restore_position) and ('Z' in restore_position)) else "") %}
    _PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION PT={tool.tool_number} {command_params}

  # ------------------------------------------------------------------------
  after_change_gcode:
  # ------------------------------------------------------------------------
    {action_respond_info("Running `after_change_gcode` macros...")}
    {action_respond_info("Running `after_change_gcode` DT=%s -> PT=%s" % (dropoff_tool, pickup_tool))}
    {action_respond_info("Running `after_change_gcode` DT=%s -> PT=%s" % (dropoff_tool|string|lower, pickup_tool|string|lower))}

    # dropoff_tool and pickup_tool are in format `tool T1`, `tool T2` etc.
    {% set dropoff_tool_number = dropoff_tool|string|replace('tool T', '') if dropoff_tool|string|lower != "none" else none %} # dropoff_tool as 0 1 N
    {% set pickup_tool_number = pickup_tool|string|replace('tool T', '') if dropoff_tool|string|lower != "none" else none %}   # pickup_tool as 0 1 N
    _PICKUP_AFTER_CHANGE DT={dropoff_tool_number} PT={pickup_tool_number}

  finalize_after_change_gcode:
    # runnung after tool changed, state is resored and gcode offset restored.
    {% set dropoff_tool_number = dropoff_tool|string|replace('tool T', '') if dropoff_tool|string|lower != "none" else none %} # dropoff_tool as 0 1 N
    {% set pickup_tool_number = pickup_tool|string|replace('tool T', '') if dropoff_tool|string|lower != "none" else none %}   # pickup_tool as 0 1 N
    _PICKUP_FINALIZE_AFTER_CHANGE DT={dropoff_tool_number} PT={pickup_tool_number}

# -------------------------------------------------------------------------
# TOOLCHANGES RUTINES
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
[gcode_macro _DROPOFF_BEFORE_CHANGE]
description: [DT<dropoff_tool>] [PT<pickup_tool>] [X<restore_position_x>] [Y<restore_position_y>] [Z<restore_position_z>]
  Macros called before tool change.
  DT= Dropoff tool number (0,1,2...)
  PT= Pickup tool number (0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.DT is defined) or (not params.PT is defined) %}
    {action_raise_error("_DROPOFF_BEFORE_CHANGE: "
      "Dropoff or Pickup tool is not defined."
    )}
  {% endif %}

  # Store positions to restore after _LTC_PAUSE if it was called.
  {% set restore_position_x = params.X|default(-1)|float %}
  {% set restore_position_y = params.Y|default(-1)|float %}
  {% set restore_position_z = params.Z|default(-1)|float %}
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_x VALUE={restore_position_x}
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_y VALUE={restore_position_y}
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_z VALUE={restore_position_z}
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=restore_position_saved VALUE=1
  {action_respond_info("_DROPOFF_BEFORE_CHANGE: "
    "Restore position: x=%.2f y=%.2f z=%.2f" %
    (restore_position_x, restore_position_y, restore_position_z)
  )}

  # Save tools to be able to run _LTC_PAUSE and restore from it.
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=dropoff_tool_number VALUE={params.DT}
  SET_GCODE_VARIABLE MACRO="_LTC_PAUSE" VARIABLE=pickup_tool_number VALUE={params.PT}

  SAVE_GCODE_STATE NAME=BEFORE_TOOL_CHANGE_STATE
  LIFTBAR_CHECK_HOMED

  # dropoff_tool and pickup_tool are in format `tool T1`, `tool T2` etc.
  {% set dropoff_tool = 'tool T' ~ params.DT|string %}
  {% set pickup_tool = 'tool T' ~ params.PT|string %}
  {% set dropoff_tool_name = dropoff_tool|string|replace('tool T', 'T') %}  # dropoff_tool as T0 T1 TN
  {% set dropoff_tool_number = dropoff_tool|string|replace('tool T', '') %} # dropoff_tool as 0 1 N
  {% set pickup_tool_name = pickup_tool|string|replace('tool T', 'T') %}    # pickup_tool as T0 T1 TN
  {% set pickup_tool_number = pickup_tool|string|replace('tool T', '') %}   # pickup_tool as 0 1 N

  {action_respond_info("_DROPOFF_BEFORE_CHANGE: "
    "Changing tool form tool=%s to tool=%s" %
    (dropoff_tool_name, pickup_tool_name)
  )}

  # Check if current tool is attached to curriage.
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    _LTC_CHECK_CARRIAGE_STATE T={dropoff_tool_number} S="PRESSED" M="_LTC_BEFORE_CHANGE: Cannot drop tool T{dropoff_tool_number} because it is not attached"
  {% endif %}

  # Check if no another tool is on the dock position for drop.
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    _LTC_CHECK_DOCKING_STATE T={dropoff_tool_number} S="RELEASED" M="_LTC_BEFORE_CHANGE: Cannot drop tool T{dropoff_tool_number} because it is ALREADY docked."
  {% endif %}

  # Move liftbar to position where change should happen.
  # Consider raising of toolhead which happens in `_DROPOFF_RAISE_TOOLHED`
  # ----------------------------------------------------------------------
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    {% set raise_toolhead_dist = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].raise_toolhead_dist|float %}
    {% set calc_cur_z = cur_z + raise_toolhead_dist %}  # don't use max because it will be checked in next function.
    LIFTBAR_MOVE_TO_CHANGE_POSITION Z={calc_cur_z} DT={dropoff_tool_number} PT={pickup_tool_number} SYNC=0
  {% endif %}

  # Temperature for current tool.
  # Chack temperature of current tool and change it if needed to initial.
  # Does not consider first layer @see https://github.com/jschuh/klipper-macros/blob/main/layers.cfg
  # ----------------------------------------------------------------------
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    RESPOND TYPE=echo MSG='_DROPOFF_BEFORE_CHANGE: Check if we need to change temperature for dropoff tool={dropoff_tool_name}'
    {% if (printer.print_stats.state == "printing") and (printer["gcode_macro " + dropoff_tool_name]) %}
      {% set tool_nozzle_temperature_initial = printer["gcode_macro " + dropoff_tool_name].nozzle_temperature_initial|default(0)|float %}
      {% set tool_nozzle_temperature = printer["gcode_macro " + dropoff_tool_name].nozzle_temperature|default(0)|float %}
      {% set wait_temperature_delta = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].wait_temperature_delta|default(0)|float %}
      {% set is_primed = printer["gcode_macro PRINT_START"].is_primed|int %}
      RESPOND TYPE=echo MSG='_DROPOFF_BEFORE_CHANGE: Tool={dropoff_tool_name} t_initial={tool_nozzle_temperature_initial} t={tool_nozzle_temperature}'
      {% if is_primed == 0 %}
        {% if tool_nozzle_temperature_initial != 0 %}
          RESPOND TYPE=echo MSG='_DROPOFF_BEFORE_CHANGE: Set temperature tool={dropoff_tool_name} to t={tool_nozzle_temperature_initial - wait_temperature_delta}'
          M104 {dropoff_tool_name} S{tool_nozzle_temperature_initial - wait_temperature_delta}
        {% endif %}
      {% else %}
        {% if tool_nozzle_temperature != 0 %}
          RESPOND TYPE=echo MSG='_DROPOFF_BEFORE_CHANGE: Set temperature tool={dropoff_tool_name} to t={tool_nozzle_temperature - wait_temperature_delta}'
          M104 {dropoff_tool_name} S{tool_nozzle_temperature - wait_temperature_delta}
        {% endif %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO={dropoff_tool_name} VARIABLE=color VALUE="''"
    {% endif %}
  {% endif %}

  # Pre-heat next tool.
  # Before drop the tool start preheating next tool.
  # Does not consider first layer @see https://github.com/jschuh/klipper-macros/blob/main/layers.cfg
  # ----------------------------------------------------------------------
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    RESPOND TYPE=echo MSG='_DROPOFF_BEFORE_CHANGE: Check if we need to preheating tool={pickup_tool_name}'
    {% if (printer.print_stats.state == "printing") and (printer["gcode_macro " + pickup_tool_name]) %}
      {% set tool_nozzle_temperature_initial = printer["gcode_macro " + pickup_tool_name].nozzle_temperature_initial|default(0)|float %}
      {% set tool_nozzle_temperature = printer["gcode_macro " + pickup_tool_name].nozzle_temperature|default(0)|float %}
      RESPOND TYPE=echo MSG='_DROPOFF_BEFORE_CHANGE: Tool={pickup_tool} t_initial={tool_nozzle_temperature_initial} t={tool_nozzle_temperature}'
      {% set is_primed = printer["gcode_macro PRINT_START"].is_primed|int %}
      {% if is_primed == 0 %}
        {% if tool_nozzle_temperature_initial != 0 %}
          RESPOND TYPE=echo MSG='_DROPOFF_BEFORE_CHANGE: Preheating tool={pickup_tool} to INITIAL t={tool_nozzle_temperature_initial}'
          M104 {pickup_tool_name} S{tool_nozzle_temperature_initial}
        {% endif %}
      {% else %}
        {% if tool_nozzle_temperature != 0 %}
          RESPOND TYPE=echo MSG='_DROPOFF_BEFORE_CHANGE: Preheating tool={pickup_tool} to t={tool_nozzle_temperature}'
          M104 {pickup_tool_name} S{tool_nozzle_temperature}
        {% endif %}
      {% endif %}


    {% endif %}
  {% endif %}

  # Codeblock for FIXes of Orca Slicer behaviour.
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set is_orce_slicer = printer["gcode_macro PRINT_START"].is_orce_slicer %}
    {% if is_orce_slicer == 1 %}
        # ...
    {% endif %}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _DROPOFF_RAISE_TOOLHED]
description: [DT<dropoff_tool>]
  Dropoff tool stage.
  DT= Dropp tool number(0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.DT is defined) %}
    {action_raise_error("_DROPOFF_RAISE_TOOLHED: Drop tool is not defined.")}
  {% endif %}

  # All moves to change position place should start with small raise
  # of toolhead to 1. ensure we do not touch a part AND
  # 2. to avoid crossing toolhead wires.
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set raise_toolhead_dist = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].raise_toolhead_dist|float %}
    {% set calc_cur_z = [cur_z + raise_toolhead_dist, max_z]|min %}
    {% set fast_speed_z = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed_z|float %}
    G0 Z{calc_cur_z} F{fast_speed_z}    # Move up to avoid crashing into things
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _DROPOFF_MOVE_TO_CLOSE_POSITION]
description: [DT<dropoff_tool>]
  Dropoff tool stage.
  DT= Dropp tool number(0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.DT is defined) %}
    {action_raise_error("_DROPOFF_MOVE_TO_CLOSE_POSITION: Drop tool is not defined.")}
  {% endif %}

  LIFTBAR_CHECK_HOMED

  {% set cfg = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"] %}
  {% set safe_y = cfg.safe_y|float %}
  {% set close_y = cfg.close_y|float %}
  {% set fast_speed = cfg.fast_speed|float %}
  {% set fast_speed_z = cfg.fast_speed_z|float %}
  {% set parking_speed = cfg.parking_speed|float %}
  {% set end_parking_speed = cfg.end_parking_speed|float %}
  {% set speed_ratio = cfg.speed_ratio|float|default(1) %}

  {% set tool = printer['tool T' ~ params.DT] %}
  {% set park_x = tool.params_park_x|float %}
  {% set park_y = tool.params_park_y|float %}
  {% set park_z = tool.params_park_z|float %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    # LIEFTBAR CALCULATION - Move toolhead to current liftbar position.
    {% set cur_z = printer.toolhead.position[2]|float %}
    {% set liftbar_z = printer["gcode_macro LIFTBAR_HOME"].target_position|float %}
    {% set liftbar_max_z = printer["gcode_macro LIFTBAR_HOME"].home_pos|float %}
    {% set h_relative_to_t0_nozzle = liftbar_max_z - liftbar_z %}
    {% set need_raise_toolhead = park_z + h_relative_to_t0_nozzle - cur_z %}

    {% if printer["gcode_macro LIFTBAR_HOME"].mode == 0 %}
      {% set z = cur_z + need_raise_toolhead %}
    {% elif printer["gcode_macro LIFTBAR_HOME"].mode == 1 %}
      {% set z = cur_z + need_raise_toolhead %}
    {% elif printer["gcode_macro LIFTBAR_HOME"].mode == 2 %}
      {% set z = cur_z + need_raise_toolhead %}
    {% endif %}

    {% set cur_x = printer.toolhead.position[0]|float %}
    {% set cur_y = printer.toolhead.position[1]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}

    {% set use_round_path = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].use_round_path|default(0)|int %}
    {% if use_round_path %}
      {% if cur_y < safe_y %}
        ROUNDED_G0 Y={safe_y} D=20 F={fast_speed * speed_ratio}
      {% endif %}

      ROUNDED_G0 X={park_x} D=150 F={fast_speed * speed_ratio}
      ROUNDED_G0 Y={safe_y} D=20 F={fast_speed * speed_ratio}
      ROUNDED_G0 Z={z} D=20 F={fast_speed_z * speed_ratio}
      ROUNDED_G0 Y={close_y} D=0 F={parking_speed} * speed_ratio
    {% else %}
      {% if cur_y < safe_y %}
        G0 Y{safe_y} F{fast_speed * speed_ratio}        # Move up to the dock
      {% endif %}

      #G0 X{park_x} F{fast_speed * speed_ratio}
      #G0 Y{safe_y} F{fast_speed * speed_ratio}
      G0 X{park_x} Y{safe_y} F{fast_speed * speed_ratio}

      G0 Z{z} F{fast_speed_z * speed_ratio}
      G0 Y{close_y} F{parking_speed * speed_ratio}
    {% endif %}
  {% endif %}

  LIFTBAR_MOVE SYNC=1

# -------------------------------------------------------------------------
[gcode_macro _DROPOFF_MOVE_TO_PARK_POSITION]
description: [DT<dropoff_tool>]
  Dropoff tool stage.
  DT= Dropp tool number(0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.DT is defined) %}
    {action_raise_error("_DROPOFF_MOVE_TO_CLOSE_POSITION: Drop tool is not defined.")}
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set tool = printer['tool T' + params.DT|string] %}
    {% set y = tool.params_park_y|float %}
    {% set fast_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed|float %}
    {% set parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].parking_speed|float %}
    {% set end_parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].end_parking_speed|float %}
    {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}
    G0 Y{y + 20} F{parking_speed * speed_ratio}
    G0 Y{y} F{end_parking_speed * speed_ratio}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _DROPOFF_MOVE_DOWN_ON_PARK_POSITION]
description: [DT<dropoff_tool>]
  Dropoff tool stage.
  DT= Dropp tool number(0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.DT is defined) %}
    {action_raise_error("_DROPOFF_MOVE_DOWN_ON_PARK_POSITION: Drop tool is not defined.")}
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set tool = printer['tool T' + params.DT|string] %}
    {% set x = tool.params_park_x|float %}
    {% set unlock_move = tool.params_park_unlock_move|float %}
    {% set end_parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].end_parking_speed|float %}
    {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}
    G0 X{x - unlock_move} F{end_parking_speed * speed_ratio}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _DROPOFF_MOVE_BACK_TO_SAFE_POSITION]
description: [DT<dropoff_tool>]
  Dropoff tool stage.
  DT= Dropp tool number(0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.DT is defined) %}
    {action_raise_error("_DROPOFF_MOVE_DOWN_ON_PARK_POSITION: Drop tool is not defined.")}
  {% endif %}

  {% set tool = printer['tool T' + params.DT|string] %}
  {% set x = tool.params_park_x|float %}
  {% set y = tool.params_park_y|float %}
  {% set z = tool.params_park_z|float %}
  {% set safe_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].safe_y|float %}
  {% set safe_y_no_tool = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].safe_y_no_tool|float %}
  {% set close_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].close_y|float %}
  {% set fast_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed|float %}
  {% set parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].parking_speed %}
  {% set end_parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].end_parking_speed %}
  {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    #G0 Y{y + 3} F{end_parking_speed * speed_ratio}
    _GMOVE_WAIT Y={y + 3} F={end_parking_speed * speed_ratio}
    _LTC_CHECK_CARRIAGE_STATE T={tool.tool_number} S=RELEASED M="Cannot dock tool=T{tool.tool_number}. Carraige sensor is not released. Check `QUERY_BUTTON button=carriagesense_t{tool.tool_number}` it should be `RELEASED`"
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    #G0 Y{close_y} F{parking_speed * 2 * speed_ratio}
    _GMOVE_WAIT Y={close_y} F={parking_speed * 3 * speed_ratio}
    _LTC_CHECK_DOCKING_STATE T={tool.tool_number} S=PRESSED M="Cannot dock tool=T{tool.tool_number}. Docked sensor is not pressed. Check `QUERY_BUTTON button=docksense_t{tool.tool_number}` it should be `PRESSED`"
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set tc_no_tool_attached = printer["gcode_macro PRINT_START"].tc_no_tool_attached|default(0) %}
    {% if tc_no_tool_attached == 1 %}
      G0 Y{safe_y_no_tool} F{fast_speed * speed_ratio}
    {% else %}
      G0 Y{safe_y} F{fast_speed * speed_ratio}
    {% endif %}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _PICKUP_MOVE_TO_CLOSE_POSITION]
description: [PT<pickup_tool_number>]
  Pickup tool stage.
  PT= Pickup tool number(0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.PT is defined) and (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {action_raise_error("_PICKUP_MOVE_TO_CLOSE_POSITION: Pickup tool is not defined.")}
  {% endif %}

  LIFTBAR_CHECK_HOMED

  {% set tool = printer['tool T' + params.PT] %}
  {% set x = tool.params_park_x|float %}
  {% set y = tool.params_park_y|float %}
  {% set z = tool.params_park_z|float %}
  {% set unlock_move = tool.params_park_unlock_move|float %}
  {% set safe_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].safe_y|float %}
  {% set safe_y_no_tool = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].safe_y_no_tool|float %}
  {% set close_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].close_y|float %}
  {% set fast_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed|float %}
  {% set fast_speed_z = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed_z|float %}
  {% set parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].parking_speed|float %}
  {% set end_parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].end_parking_speed|float %}
  {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    # Make sure we are on Y safe position.
    {% set tc_no_tool_attached = printer["gcode_macro PRINT_START"].tc_no_tool_attached|default(0) %}
    {% if tc_no_tool_attached == 1 %}
      G0 Y{safe_y_no_tool} F{fast_speed * speed_ratio}
    {% else %}
      G0 Y{safe_y} F{fast_speed * speed_ratio}
    {% endif %}
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    # LIEFTBAR CALCULATION - Move toolhead to current liftbar position.
    {% set cur_z = printer.toolhead.position[2]|float %}
    {% set liftbar_z = printer["gcode_macro LIFTBAR_HOME"].target_position|float|default(-1) %}
    {% set liftbar_max_z = printer["gcode_macro LIFTBAR_HOME"].home_pos|float %}
    {% set h_relative_to_t0_nozzle = liftbar_max_z - liftbar_z %}
    {% set need_raise_toolhead = z + h_relative_to_t0_nozzle - cur_z %}
    {% set z = cur_z + need_raise_toolhead %}

    G0 X{x - unlock_move} F{fast_speed * speed_ratio}
    G0 Z{z} F{fast_speed_z * speed_ratio}
    G0 Y{close_y} F{fast_speed * speed_ratio}

    # Sync move with liftbar.
  {% endif %}

  LIFTBAR_MOVE SYNC=1

# -------------------------------------------------------------------------
[gcode_macro _PICKUP_PREHEAT_TOOL]
description: [PT<pickup_tool_number>]
  Preheat tool on pickup
  PT= Pickup tool number(0,1,2...)
gcode:
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
    {% if (not params.PT is defined) %}
      {action_raise_error("_ON_PICKUP_PREHEAT_TOOL: Pickup tool is not defined.")}
    {% endif %}

    {% set tool = printer['tool T' + params.PT] %}
    {% set tool_name = tool.name|string|replace('tool T', 'T') %}
    RESPOND TYPE=echo MSG='_ON_PICKUP_PREHEAT_TOOL: Check if we need to preheating tool={tool_name}'
    {% if (printer.print_stats.state == "printing") and (printer["gcode_macro " + tool_name ]) %}
      {% set tool_nozzle_temperature_initial = printer["gcode_macro " + tool_name].nozzle_temperature_initial|float|default(0) %}
      {% set tool_nozzle_temperature = printer["gcode_macro " + tool_name].nozzle_temperature|float|default(0) %}
      {% set is_primed = printer["gcode_macro PRINT_START"].is_primed|int %}
      {% if is_primed == 0 %}
        {% if tool_nozzle_temperature_initial != 0 %}
          RESPOND TYPE=echo MSG='_ON_PICKUP_PREHEAT_TOOL: Preheating tool={tool_name} to INITIAL t={tool_nozzle_temperature_initial}'
          M104 {tool_name} S{tool_nozzle_temperature}
        {% endif %}
      {% else %}
        {% if tool_nozzle_temperature != 0 %}
          RESPOND TYPE=echo MSG='_ON_PICKUP_PREHEAT_TOOL: Preheating tool={tool_name} to t={tool_nozzle_temperature}'
          M104 {tool_name} S{tool_nozzle_temperature}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _PICKUP_MOVE_TO_PARK_POSITION]
description: [PT<pickup_tool_number>]
  Pickup tool stage.
  T= Pickup tool number(0,1,2...)
  Pickup tool stage.
  PT= Pickup tool number(0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.PT is defined) and (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {action_raise_error("_PICKUP_MOVE_TO_PARK_POSITION: Pickup tool is not defined.")}
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set tool = printer['tool T' + params.PT] %}
    {% set y = tool.params_park_y|float %}
    {% set parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].parking_speed|float %}
    {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}

    G0 Y{y + 20} F{parking_speed * 2 * speed_ratio}
    G0 Y{y} F{parking_speed * speed_ratio}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _PICKUP_MOVE_UP_ON_PARK_POSITION]
description: [PT<pickup_tool_number>]
  Pickup tool stage.
  PT= Pickup tool number(0,1,2...)
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.PT is defined) and (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {action_raise_error("_PICKUP_MOVE_UP_ON_PARK_POSITION: Pickup tool is not defined.")}
  {% endif %}

  {% set tool = printer['tool T' + params.PT] %}
  {% set x = tool.params_park_x|float %}
  {% set y = tool.params_park_y|float %}
  {% set z = tool.params_park_z|float %}
  {% set lock_move = tool.params_park_lock_move|float|default(11.2) %}
  {% set end_parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].end_parking_speed|float|default(500) %}
  {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    G0 X{x} F{end_parking_speed * speed_ratio}
    M400
    _LTC_CHECK_DOCKING_STATE T={params.PT} S=RELEASED M="Cannot attach tool=T{params.PT}. Tool is still docked."
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    _LTC_CHECK_CARRIAGE_STATE T={params.PT} S=PRESSED M="Cannot attach tool=T{params.PT}. Carriage is not attached properly."
  {% endif %}

  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% if tool.tool_number != 0 %}
      G0 X{x + lock_move} F{end_parking_speed * speed_ratio}
    {% endif %}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _PICKUP_MOVE_BACK_TO_SAFE_POSITION]
description: [PT<pickup_tool_number>] [RESTORE_Z<restore_z_position>]
  Pickup tool stage.
  PT= Pickup tool number(0,1,2...)
  RESTORE_Z= Z position where toolhed will move after restore.
gcode:
  {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
  {% if (not params.PT is defined) and (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {action_raise_error("_PICKUP_MOVE_TO_CLOSE_POSITION: Pickup tool is not defined.")}
  {% endif %}

  {% set tool = printer['tool T' ~ params.PT] %}
  {% set y = tool.params_park_y|float %}
  {% set safe_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].safe_y|float %}
  {% set close_y = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].close_y|float %}
  {% set fast_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed|float %}
  {% set parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].parking_speed|float %}
  {% set cleaning_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].cleaning_speed|float %}
  {% set end_parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].end_parking_speed|float %}
  {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}
  {% set wipes_qtw = 2 %} # Number of wipes on layer above first.

  # Purge tool on first swap.
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set is_primed = printer["gcode_macro PRINT_START"].is_primed|int %}
    {% if (is_primed == 1) and (tool.tool_number != 0) and (tool.params_is_purged_in_place == 0) %}
      {% if printer.print_stats.state == "printing" %}
        G91 ; go relative
        G0 Y15 F{parking_speed * speed_ratio}
        G0 X-10 F{parking_speed * speed_ratio}
        G90 ; go absolute
        PURGE_NOZZLE LENGTH=40
        G91 ; go relative
        G0 X10 F{parking_speed * speed_ratio}
        G0 Y-15 F{parking_speed * speed_ratio}
        G90 ; go absolute
        SET_TOOL_PARAMETER T={tool.tool_number} PARAMETER="params_is_purged_in_place" VALUE=1
        {% set wipes_qtw = 5 %} # Number of wipes on first layer only.
      {% endif %}
    {% endif %}
  {% endif %}

  # Clear a bit nozzle in place if nozzle heated up.
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set purge_temp_min = printer["gcode_macro _clean_nozzle_varables"].purge_temp_min %}
    {% if printer[tool.extruder].temperature >= purge_temp_min %}
      {% for i in range(wipes_qtw) %}
        G91 ; go relative
        G0 Y10 F{cleaning_speed}
        G0 Y-10 F{cleaning_speed}
        G90 ; go absolute
      {% endfor %}
    {% endif %}
  {% endif %}

  # Move toolhead to safe_y position.
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    G90 ; go absolute
    G0 Y{close_y} F{parking_speed * speed_ratio}

    {% set use_round_path = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].use_round_path|int|default(0) %}
    {% if use_round_path %}
      ROUNDED_G0 Y={safe_y} F={fast_speed * speed_ratio} D=20
    {% else %}
      G0 Y{safe_y} F{fast_speed * speed_ratio}
    {% endif %}
  {% endif %}

  # Move liftbar to position where toolhead is in restore position.
  # RESTORE_Z is the position were print head continue to print.
  # So basically we align liftbar with printed toolhead.
  # we need to tell this tooldead Z because tool is still moving.
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% if printer["gcode_macro LIFTBAR_HOME"].mode != 1 %}
      {% set command_params = ((" Z=" ~ params.RESTORE_Z) if (params.RESTORE_Z is defined) else "") %}
      LIFTBAR_CHECK_HOMED
      LIFTBAR_LAYER_CHANGE {command_params}   # Move liftbar to the waiting next change position.
    {% endif %}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION]
description: [PT<pickup_tool_number>] [X<restore_position_x>] [Y<restore_position_y>] [Z<restore_position_z>]
  Pickup tool stage.
  PT= Pickup tool number(0,1,2...)
gcode:
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
    {% if (not params.PT is defined) %}
      {action_raise_error("_PICKUP_MOVE_TO_CLOSE_POSITION: Pickup tool is not defined.")}
    {% endif %}

    {action_respond_info("Running `_PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION` macros...")}

    # Define restore position
    {% set restore_position_x = params.X|float if (params.X is defined) else -1 %}
    {% set restore_position_y = params.Y|float if (params.Y is defined) else -1 %}
    {% set restore_position_z = params.Z|float if (params.Z is defined) else -1 %}
    # @TODO: If restore_position_y is less than safe_y position need to wait untill full move of liftbar.

    {% set tool = printer['tool T' ~ params.PT] %}
    {% set fast_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed|float %}
    {% set fast_speed_z = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].fast_speed_z|float %}
    {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|default(1)|float %}

    {action_respond_info("_PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION: Restore position x=%.2f y=%.2f z=%.2f" %
      (restore_position_x, restore_position_y, restore_position_z)
    )}

    {% set use_round_path = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].use_round_path|int|default(0) %}
    {% if use_round_path %}
      {% if (restore_position_z != -1) %}
        ROUNDED_G0 Z={restore_position_z + 10} F={fast_speed_z * speed_ratio} D=20
      {% endif %}
      {% if (restore_position_y != -1) %}
        ROUNDED_G0 Y={restore_position_y} F={fast_speed * speed_ratio} D=20
      {% endif %}
      {% if (restore_position_x != -1) %}
        ROUNDED_G0 X={restore_position_x} F={fast_speed * speed_ratio} D=150 # D=1000
      {% endif %}
      ROUNDED_G0 D=0
    {% else %}
      {% if (restore_position_z != -1) %}
        {action_respond_info("_PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION: Move Z=%.2f" % (restore_position_z))}
        G0 Z{restore_position_z + 5} F{fast_speed_z * speed_ratio}
      {% endif %}

      {% if (restore_position_y != -1) and (restore_position_x != -1) %}
        G0 X{restore_position_x} Y{restore_position_y} F{fast_speed * speed_ratio}
      {% else %}
        {% if (restore_position_y != -1) %}
          #{action_respond_info("_PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION: Move Y=%.2f" % (restore_position_y))}
          G0 Y{restore_position_y} F{fast_speed * speed_ratio}
        {% endif %}
        {% if (restore_position_x != -1) %}
          #{action_respond_info("_PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION: Move X=%.2f" % (restore_position_x))}
          G0 X{restore_position_x} F{fast_speed * speed_ratio}
        {% endif %}
      {% endif %}
    {% endif %}

    {% if (restore_position_z != -1) %}
    {action_respond_info("_PICKUP_MOVE_BACK_TO_ORIGINAL_POSITION: Move Z=%.2f" % (restore_position_z))}
      G0 Z{restore_position_z} F{fast_speed_z * speed_ratio}
    {% endif %}

  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _PICKUP_AFTER_CHANGE]
description: [DT<dropoff_tool>] [PT<pickup_tool>]
  Macros called before tool change
  DT= Dropoff tool number (0,1,2...)
  PT= Pickup tool number (0,1,2...)
gcode:
  {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
    {% set current_tool_number = printer[printer.toolchanger.tool].tool_number %}
    {% if (not params.DT is defined) or (not params.PT is defined) %}
      {action_raise_error("_PICKUP_AFTER_CHANGE: "
        "Dropoff or Pickup tool is not defined."
      )}
    {% endif %}

    {action_respond_info("Running `_PICKUP_AFTER_CHANGE` macros... T%s to T%s" %
      (params.DT|string|lower, params.PT|string|lower)
    )}

    # dropoff_tool and pickup_tool are in format `tool T1`, `tool T2` etc.
    {% set dropoff_tool = 'tool T' + params.DT|string %}
    {% set pickup_tool = 'tool T' + params.PT|string %}
    {% set dropoff_tool_name = dropoff_tool|string|replace('tool T', 'T') %}  # dropoff_tool as T0 T1 TN
    {% set dropoff_tool_number = dropoff_tool|string|replace('tool T', '') %} # dropoff_tool as 0 1 N
    {% set pickup_tool_name = pickup_tool|string|replace('tool T', 'T') %}    # pickup_tool as T0 T1 TN
    {% set pickup_tool_number = pickup_tool|string|replace('tool T', '') %}   # pickup_tool as 0 1 N

    {action_respond_info("_PICKUP_AFTER_CHANGE: Changing tool form tool=%s to tool=%s" %
      (dropoff_tool_name, pickup_tool_name)
    )}

    # Change inactive tools color in UI interface.
    {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
      {% if (params.DT) and (params.DT|string|lower != "none") %}
        {% if printer["gcode_macro " + dropoff_tool_name] %}
          SET_GCODE_VARIABLE MACRO={dropoff_tool_name} VARIABLE=color VALUE="''"
        {% endif %}
        {% set led_idle_command = dropoff_tool_name + "_panel_idle" %}
        SET_LED_EFFECT EFFECT={led_idle_command} REPLACE=1
      {% endif %}
    {% endif %}

    # Change active tool color in UI interface.
    {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
      {% if (params.PT) and (params.PT|string|lower != "none") %}
        {% if printer["gcode_macro " + pickup_tool_name] %}
          SET_GCODE_VARIABLE MACRO={pickup_tool_name} VARIABLE=color VALUE="'c44'"
        {% endif %}
        {% set led_default_command = pickup_tool_name + "_default_light" %}
        SET_LED_EFFECT EFFECT={led_default_command} REPLACE=1
      {% endif %}
    {% endif %}

    # Set Input Shaper for active tool.
    {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
      {% if (printer.toolchanger.tool.params_input_shaper_freq_x) %}
        # SET_INPUT_SHAPER SHAPER_FREQ_X={printer.toolchanger.tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={printer.toolchanger.tool.params_input_shaper_freq_y}
      {% endif %}
    {% endif %}

    # Move liftbar.
    {% if (not printer["gcode_macro _LTC_PAUSE"].is_ltc_paused) %}
      {% if (params.DT) and (params.DT|string|lower != "none") %}
        LIFTBAR_CHECK_HOMED
        LIFTBAR_LAYER_CHANGE    # MCheck liftbar was  oved to the waiting next change position.
      {% endif %}
    {% endif %}
  {% endif %}


# -------------------------------------------------------------------------
[gcode_macro _PICKUP_FINALIZE_AFTER_CHANGE]
gcode:
  {% set params_feedrate = printer["gcode_macro PRINT_START"].params_feedrate|float %}
  {% if params_feedrate != -1 %}
    {action_respond_info("_PICKUP_FINALIZE_AFTER_CHANGE: Restore M220. Set feedrate to %.2f" % (params_feedrate))}
    M220 S{params_feedrate}
  {% endif %}

# -------------------------------------------------------------------------
[gcode_macro _LTC_TEST_MOVE_TO_PARK_POSITION]
gcode:
  {% set cur_x = printer.toolhead.position[0]|float %}
  {% set cur_y = printer.toolhead.position[1]|float %}
  {% set cur_z = printer.toolhead.position[2]|float %}

  _LTC_BEFORE_CHANGE DT={params.DT} PT={params.PT} X={cur_x} Y={cur_y} Z={cur_z}
  _DROPOFF_RAISE_TOOLHED DT={params.DT}
  _DROPOFF_MOVE_TO_CLOSE_POSITION DT={params.DT}
  _DROPOFF_MOVE_TO_PARK_POSITION DT={params.DT}
  LTC_SET_CURRENT_ON_CHANGE

# -------------------------------------------------------------------------
[gcode_macro _GMOVE_WAIT]
description: Moves as G0 - wrapper
gcode:
  {% set parking_speed = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].parking_speed %}
  {% set speed_ratio = printer["gcode_macro _TOOLCHANGER_CONFIGURATION"].speed_ratio|float|default(1) %}
  {% set cur_x = printer.toolhead.position[0]|float %}
  {% set cur_y = printer.toolhead.position[1]|float %}
  {% set cur_z = printer.toolhead.position[2]|float %}
  G0 X{params.X|float if params.X is defined else cur_x} Y{params.Y|float if params.Y is defined else cur_y} Z{params.Z|float if params.Z is defined else cur_z} F{params.F|float if params.F is defined else parking_speed * speed_ratio}
  M400

# -------------------------------------------------------------------------
[gcode_macro LTC_APPLY_GCODE_OFFSET]
description: [T<tool_number>]
  Apply gcode ofset from specified tool (current tool by default).
  T= Tool number (0,1,2...) Optional, current tool by default.
gcode:
  {% set tool = printer['tool T' + params.T] if (params.T is defined) else
                printer[printer.toolchanger.tool] %}
  {% set tool_x_offset = tool.gcode_x_offset %}
  {% set tool_y_offset = tool.gcode_y_offset %}
  {% set tool_z_offset = tool.gcode_z_offset %}
  SET_GCODE_OFFSET X={tool_x_offset} Y={tool_y_offset} Z={tool_z_offset} MOVE=1
